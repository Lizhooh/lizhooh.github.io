<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lizhooh 的技术博客</title>
  
  <subtitle>&lt;div&gt;来至未来的大全栈工程师自我修养日记。&lt;/div&gt;深耕于：数据中台、智能运营、智能推荐、用户数据分析、用户数据治理等大数据领域。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://me.lizhooh.com/"/>
  <updated>2021-06-16T03:13:51.321Z</updated>
  <id>http://me.lizhooh.com/</id>
  
  <author>
    <name>Lizhooh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apache Druid 介绍</title>
    <link href="http://me.lizhooh.com//stories/2021/06/%E5%A4%A7%E6%95%B0%E6%8D%AE/Apache%20Druid%20%E4%BB%8B%E7%BB%8D/"/>
    <id>http://me.lizhooh.com//stories/2021/06/大数据/Apache Druid 介绍/</id>
    <published>2021-06-15T10:59:11.000Z</published>
    <updated>2021-06-16T03:13:51.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在本文里将介绍，大数据分析数据库 Druid，针对 Druid 做一个简要的介绍，以及它的应用场景。</p><h2 id="Druid-是什么？"><a href="#Druid-是什么？" class="headerlink" title="Druid 是什么？"></a>Druid 是什么？</h2><p><a href="https://github.com/apache/druid" target="_blank" rel="noopener">Apache Druid</a> 是一个实时分析型数据库，旨在对大型数据集进行快速的查询分析（”OLAP”查询)。Druid 最常被当做数据库来用以支持实时读取、高性能查询和高稳定运行的应用场景，同时，Druid 也通常被用来助力分析型应用的图形化界面，或者当做需要快速聚合的高并发后端 API，Druid 最适合应用于面向事件类型的数据。</p><a id="more"></a><h2 id="Druid-的特点"><a href="#Druid-的特点" class="headerlink" title="Druid 的特点"></a>Druid 的特点</h2><p>Druid 的核心架构吸收和结合了数据仓库、时序数据库以及检索系统)的优势，其主要特征如下：</p><ol><li><strong>列式存储</strong>，与传统的关系型数据库不同，Druid 使用列式存储，这意味着在一个特定的数据查询中它只需要查询特定的列，这样极地提高了部分列查询场景的性能。另外，每一列数据都针对特定数据类型做了优化存储，从而支持快速的扫描和聚合。</li><li><strong>可扩展的分布式系统</strong>，Druid 通常部署在<strong>数十到数百台</strong>服务器的集群中，并且可以提供每秒数百万条记录的接收速率，数万亿条记录的保留存储以及亚秒级到几秒的查询延迟。</li><li><strong>大规模并行处理</strong>，Druid 可以在整个集群中并行处理查询。</li><li><strong>实时或批量读取</strong>，Druid 可以实时（已经被读取的数据可立即用于查询）或批量读取数据。</li><li><strong>自修复、自平衡、易于操作</strong>，作为集群运维操作人员，要伸缩集群只需添加或删除服务，集群就会在后台自动重新平衡自身，而不会造成任何停机。如果任何一台 Druid 服务器发生故障，系统将自动绕过损坏。 Druid 设计为 7*24 全天候运行，无需出于任何原因而导致计划内停机，包括配置更改和软件更新。</li><li><strong>不会丢失数据的云原生容错架构</strong>，一旦 Druid 读取了数据，副本就安全地存储在深度存储介质（通常是云存储，HDFS 或共享文件系统）中。即使某个 Druid 服务发生故障，也可以从深度存储中恢复您的数据。对于仅影响少数 Druid 服务的有限故障，副本可确保在系统恢复时仍然可以进行查询。</li><li><strong>用于快速过滤的索引</strong>，Druid 使用 CONCISE 或 Roaring 压缩的位图索引来创建索引，以支持快速过滤和跨多列搜索。</li><li><strong>基于时间的分区</strong>，Druid 首先按时间对数据进行分区，另外同时可以根据其他字段进行分区。这意味着基于时间的查询将仅访问与查询时间范围匹配的分区，这将大大提高基于时间的数据的性能。</li><li><strong>近似算法</strong>，Druid 应用了近似 count-distinct，近似排序以及近似直方图和分位数计算的算法。这些算法占用有限的内存使用量，通常比精确计算要快得多。对于精度要求比速度更重要的场景，Druid 还提供了精确 count-distinct 和精确排序。</li><li><strong>读取时自动汇总聚合</strong>，Druid 支持在数据读取阶段可选地进行数据汇总，这种汇总会部分预先聚合您的数据，并可以节省大量成本并提高性能。</li></ol><h2 id="使用-Druid-的场景？"><a href="#使用-Druid-的场景？" class="headerlink" title="使用 Druid 的场景？"></a>使用 Druid 的场景？</h2><p>对于使用 Druid 比较好的场景：</p><ul><li>数据插入频率比较高，但较少更新数据，例如用户的行为数据。</li><li>大多数查询场景为聚合查询和分组查询（GroupBy），同时还有一定得检索与扫描查询，例如中台的分析系统。</li><li>将数据查询延迟目标定位 100 毫秒到几秒钟之间。</li><li>数据具有时间属性（Druid 针对时间做了优化和设计），例如用户的行为数据。</li><li>在多表场景下，每次查询仅命中一个大的分布式表，查询又可能命中多个较小的 lookup 表。</li><li>场景中包含高基维度数据列（例如 URL，用户 ID 等），并且需要对其进行快速计数和排序。</li><li>需要从 Kafka、HDFS、对象存储（如 Amazon S3）中加载数据。</li></ul><p>如果使用场景符合以下特征，那么使用 Druid 可能是一个不好的选择：</p><ul><li>根据主键对现有数据进行低延迟更新操作。Druid支持流式插入，但不支持流式更新（更新操作是通过后台批处理作业完成，因为数据是分布式存储的）</li><li>延迟不重要的离线数据系统</li><li>场景中包括大连接（将一个大事实表连接到另一个大事实表），并且可以接受花费很长时间来完成这些查询。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在本文里将介绍，大数据分析数据库 Druid，针对 Druid 做一个简要的介绍，以及它的应用场景。&lt;/p&gt;
&lt;h2 id=&quot;Druid-是什么？&quot;&gt;&lt;a href=&quot;#Druid-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Druid 是什么？&quot;&gt;&lt;/a&gt;Druid 是什么？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/apache/druid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache Druid&lt;/a&gt; 是一个实时分析型数据库，旨在对大型数据集进行快速的查询分析（”OLAP”查询)。Druid 最常被当做数据库来用以支持实时读取、高性能查询和高稳定运行的应用场景，同时，Druid 也通常被用来助力分析型应用的图形化界面，或者当做需要快速聚合的高并发后端 API，Druid 最适合应用于面向事件类型的数据。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://me.lizhooh.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://me.lizhooh.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Druid" scheme="http://me.lizhooh.com/tags/Druid/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs 解决异步流读取的问题</title>
    <link href="http://me.lizhooh.com//stories/2021/04/Nodejs/Nodejs%20%E8%A7%A3%E5%86%B3%E5%BC%82%E6%AD%A5%E6%B5%81%E8%AF%BB%E5%8F%96%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://me.lizhooh.com//stories/2021/04/Nodejs/Nodejs 解决异步流读取的问题/</id>
    <published>2021-04-07T14:24:29.000Z</published>
    <updated>2021-06-15T06:10:52.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nodejs 支持流丰富的流接口，同时在操作流时允许用户进行暂停操作、转换操作，基于这些接口实现一种异步流的方式。</p><p>异步流：在读取一批数据时，停下来不读了，接下来进行一系列的异步操作，比如 IO 等。</p><p>业务需求：</p><ul><li>有 100 多万的数据进行读取转换，通过 http 接口在 Nodejs 里读取。</li><li>如果不用流那么只能进行分批，分页操作，本身分页操作比较耗请求次数和查询性能，因此用流的方式实现。</li><li>如果直接用流，在内存里拼接数据，那么很快 Nodejs OM，这里改成异步流的方式实现。</li></ul><h2 id="http-流"><a href="#http-流" class="headerlink" title="http 流"></a>http 流</h2><p>Nodejs 的流会在读一次时，读满一个 buffer 放在缓冲区了，这个大小不定，目前最多为 65534 字节。</p><p>http 接口返回的是 json 字符串，这里使用 got 请求，将 stream pipe 给一个自定义的 Transform。</p><p>根据文档，需要用户自己重写实现 _transform，也就是转换层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Transform &#125; = <span class="built_in">require</span>(<span class="string">'stream'</span>)</span><br><span class="line"><span class="keyword">const</span> got = <span class="built_in">require</span>(<span class="string">'got'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTransform</span> <span class="keyword">extends</span> <span class="title">Transform</span> </span>&#123;</span><br><span class="line">  _transform(chunk, encoding, callback) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">got.stream.post(<span class="string">'http://127.0.0.1:8082/druid/v2/?pretty'</span>, &#123;</span><br><span class="line">  responseType: <span class="string">'json'</span>,</span><br><span class="line">  json: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).pipe(myTransForm)</span><br></pre></td></tr></table></figure><p>每次流读取时，会到 _transform 里进行转换，拿到的 chunk 是一个不完整的 json 数据，等处理完成后调用 callback，继续读取下一个内容。</p><p>拿到的 chunk 不是一个完整的 json 字符串，因为流只会按照具体的字节数读取，看起来可能像：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"segmentId"</span>: <span class="string">"sss_1000-01-01T00:00:00.000Z_3000-01-01T00:00:00.000Z_0_1"</span>,</span><br><span class="line">    <span class="string">"columns"</span>: [</span><br><span class="line">      <span class="string">"timestamp"</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"events"</span>: [</span><br><span class="line">      [</span><br></pre></td></tr></table></figure><h3 id="直接拼接"><a href="#直接拼接" class="headerlink" title="直接拼接"></a>直接拼接</h3><p>如果数据量比较小时，可以直接拼接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonStr = <span class="string">''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTransform</span> <span class="keyword">extends</span> <span class="title">Transform</span> </span>&#123;</span><br><span class="line">  _transform(chunk, encoding, callback) &#123;</span><br><span class="line">    jsonStr += chunk.toString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果是上百万的数据量，Nodejs 分分钟 OM 给你看。</p><h3 id="解决拼接问题"><a href="#解决拼接问题" class="headerlink" title="解决拼接问题"></a>解决拼接问题</h3><p>这么怎么解析 json 和拼接呢？这里用到一个支持 stream 的 json 解析器：<code>jsonparse</code>，非常关键。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Parser = <span class="built_in">require</span>(<span class="string">'jsonparse'</span>)</span><br><span class="line"><span class="keyword">const</span> parser = <span class="keyword">new</span> Parser()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTransform</span> <span class="keyword">extends</span> <span class="title">Transform</span> </span>&#123;</span><br><span class="line">  _transform(chunk, encoding, callback) &#123;</span><br><span class="line">    <span class="comment">// const data = chunk.toString()</span></span><br><span class="line">    parser.write(chunk)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// write 写入之后得到一个结果</span></span><br><span class="line">parser.onValue = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(value)</span></span><br><span class="line">  <span class="comment">// console.log(this.stack)</span></span><br><span class="line">  <span class="comment">// console.log(this.key)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsonparse 拿到流的数据进行解析，它会自动分析当前的数据解析，等它觉得满足至少一项的数据结构时，jsonparse 就会触发 onValue。</p><p>后可以进行分批处理，然后在批任务里做你的异步任务，比例写数据到 Mongodb 里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTransform</span> <span class="keyword">extends</span> <span class="title">Transform</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(&#123; batchSize = <span class="number">100</span>, onTask &#125;) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.onTask = onTask || (<span class="function"><span class="params">e</span> =&gt;</span> e)</span><br><span class="line">    <span class="keyword">this</span>.batchSize = batchSize</span><br><span class="line">    <span class="keyword">this</span>.cache = [] <span class="comment">// 缓存数据，转换好的数据</span></span><br><span class="line">    <span class="keyword">this</span>.events = [] <span class="comment">// 数据列表</span></span><br><span class="line">    <span class="keyword">this</span>.columns = [] <span class="comment">// 数据列名</span></span><br><span class="line">    <span class="keyword">this</span>.parser = <span class="keyword">new</span> Parser()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.parser.onValue = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.key === <span class="string">'events'</span> &amp;&amp; <span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">        self.events.push(...value)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.key === <span class="string">'columns'</span> &amp;&amp; <span class="built_in">Array</span>.isArray(value) &amp;&amp; self.columns.length === <span class="number">0</span>) &#123;</span><br><span class="line">        self.columns = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里需要定制化</span></span><br><span class="line">  converter() &#123;</span><br><span class="line">    <span class="keyword">const</span> list = <span class="keyword">this</span>.events.map(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="keyword">this</span>.columns.reduce(<span class="function">(<span class="params">obj, key, index</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...obj,</span><br><span class="line">      [key]: item[index]</span><br><span class="line">    &#125;), &#123;&#125;))</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重写自定义的转化流的 _transform 方法</span></span><br><span class="line">  _transform(chunk, encoding, callback) &#123;</span><br><span class="line">    <span class="comment">// const data = chunk.toString()</span></span><br><span class="line">    <span class="keyword">this</span>.parser.write(chunk)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 压到缓存中</span></span><br><span class="line">    <span class="keyword">this</span>.cache = [].concat(<span class="keyword">this</span>.cache, <span class="keyword">this</span>.converter())</span><br><span class="line">    <span class="keyword">this</span>.events = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 如果等于批数，直接消费</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cache.length === <span class="keyword">this</span>.batchSize) &#123;</span><br><span class="line">      <span class="keyword">this</span>.onTask(<span class="keyword">this</span>.cache).then(callback).catch(callback)</span><br><span class="line">      <span class="keyword">this</span>.cache = []</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 如果小于批量，先缓存</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cache.length &lt; <span class="keyword">this</span>.batchSize) &#123;</span><br><span class="line">      callback()</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 超过批量，再分批</span></span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> L = <span class="keyword">this</span>.cache.length / <span class="keyword">this</span>.batchSize</span><br><span class="line">      <span class="keyword">const</span> len = <span class="built_in">Math</span>.floor(L) <span class="comment">// 向下取整</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> list = <span class="keyword">this</span>.cache.slice(i * <span class="keyword">this</span>.batchSize, (i + <span class="number">1</span>) * <span class="keyword">this</span>.batchSize)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">await</span> <span class="keyword">this</span>.onTask(list)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.cache = <span class="keyword">this</span>.cache.slice(len * <span class="keyword">this</span>.batchSize)</span><br><span class="line">      callback()</span><br><span class="line">    &#125;)()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  _flush(callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cache.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.onTask(<span class="keyword">this</span>.cache) <span class="comment">// 消费剩下的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.cache = []</span><br><span class="line">    <span class="keyword">this</span>.columns = []</span><br><span class="line">    <span class="keyword">this</span>.events = []</span><br><span class="line">    callback()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以实现异步流，并且是分批操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTransForm = <span class="keyword">new</span> MyTransform(&#123;</span><br><span class="line">  batchSize: <span class="number">100</span>,</span><br><span class="line">  onTask: <span class="keyword">async</span> (list = []) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> Model.insertMany(list)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Nodejs 支持流丰富的流接口，同时在操作流时允许用户进行暂停操作、转换操作，基于这些接口实现一种异步流的方式。&lt;/p&gt;
&lt;p&gt;异步流：在
      
    
    </summary>
    
      <category term="Nodejs" scheme="http://me.lizhooh.com/categories/Nodejs/"/>
    
    
      <category term="后端" scheme="http://me.lizhooh.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Nodejs" scheme="http://me.lizhooh.com/tags/Nodejs/"/>
    
      <category term="Javascript" scheme="http://me.lizhooh.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>分布式定时器 Redis TTL + Redlock 实现</title>
    <link href="http://me.lizhooh.com//stories/2021/03/Redis/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E5%99%A8%20Redis%20TTL%20+%20Redlock%20%E5%AE%9E%E7%8E%B0/"/>
    <id>http://me.lizhooh.com//stories/2021/03/Redis/分布式定时器 Redis TTL + Redlock 实现/</id>
    <published>2021-03-02T14:20:45.000Z</published>
    <updated>2021-06-15T06:10:52.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>哦，分布式定时器，node 端部署多台物理机器，做负载和高可用，同时单台物理机器又做了多进程的负载均衡架构。</p><p>整体思路：</p><ul><li>使用 redis 作为中间状态层。</li><li>使用 redlock 进行上锁，避免分布式多次触发的问题。</li></ul><h2 id="基于-redis-过期键"><a href="#基于-redis-过期键" class="headerlink" title="基于 redis 过期键"></a>基于 redis 过期键</h2><p>基于 redis 过期键实现的状态中间层，redis 负责定时状态的缓存和定时功能，由于 redis 有过期键的订阅发布模式，因此可以很方便的用到做定时器功能。</p><p>在 redis 设置一个 TTL，以秒为单位，进行定时。在 nodejs 上进行监听过期键：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启redis的键空间通知</span></span><br><span class="line"><span class="comment">// E：表示 keyevent 事件，有这个字母表示会往 __keyevent@&lt;db&gt;__ 频道推消息。</span></span><br><span class="line"><span class="comment">// x: 过期事件：某个key刚好过期的这个时间点触发的事件</span></span><br><span class="line">subscriber.config(<span class="string">"SET"</span>, <span class="string">"notify-keyspace-events"</span>, <span class="string">"Ex"</span>);</span><br></pre></td></tr></table></figure><p>订阅通道：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 订阅一个key过期的通知频道DB:</span></span><br><span class="line">subscriber.once(<span class="string">"connect"</span>, () =&gt; &#123;</span><br><span class="line">  subscriber.select(DB_NUMBER, (err) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 订阅 Key 过期（定时任务）事件消息通道</span></span><br><span class="line">    subscriber.subscribe(<span class="string">`__keyevent@<span class="subst">$&#123;DB_NUMBER&#125;</span>__:expired`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意需要专门连接一个订阅通道的 redis：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client = <span class="keyword">new</span> Redis(redisOptions);</span><br><span class="line">subscriber = <span class="keyword">new</span> Redis(redisOptions);</span><br></pre></td></tr></table></figure><h2 id="使用-redlock-进行加锁"><a href="#使用-redlock-进行加锁" class="headerlink" title="使用 redlock 进行加锁"></a>使用 redlock 进行加锁</h2><p>说到加锁，其实就是分布式应用的一个特点，用于避免重复执行的问题。因此在具体执行阶段需要多第一个执行者进行加锁，其他人收到消息时需要先申请锁，如果拿不到则放弃执行。</p><p>redlock 是专门用于 redis 上的算法：<a href="https://redis.io/topics/distlock" target="_blank" rel="noopener">https://redis.io/topics/distlock</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Redlock <span class="keyword">from</span> <span class="string">'redlock'</span></span><br><span class="line"></span><br><span class="line">client = <span class="keyword">new</span> Redis(redisOptions)</span><br><span class="line">redlock = <span class="keyword">new</span> Redlock([client], &#123; <span class="attr">retryCount</span>: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></figure><p>按照官方的写法，初始化锁时需要指定客户端。</p><p>那么怎么用呢？需要在监听的回调里进行判断：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redlock</span><br><span class="line">  .lock(key, ttl)</span><br><span class="line">  .then(<span class="function"><span class="params">lock</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    lock.unlock()</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这样一来，要看谁的 redlock.lock 调用的先，先调用者先获得锁，执行完成相关逻辑后再释放锁。</p><h2 id="潜在缺陷"><a href="#潜在缺陷" class="headerlink" title="潜在缺陷"></a>潜在缺陷</h2><p>无法避免两个问题：<br>1、异步数据丢失。<br>2、脑裂问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;哦，分布式定时器，node 端部署多台物理机器，做负载和高可用，同时单台物理机器又做了多进程的负载均衡架构。&lt;/p&gt;
&lt;p&gt;整体思路：&lt;/p
      
    
    </summary>
    
      <category term="Redis" scheme="http://me.lizhooh.com/categories/Redis/"/>
    
    
      <category term="数据库" scheme="http://me.lizhooh.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="NoSQL" scheme="http://me.lizhooh.com/tags/NoSQL/"/>
    
      <category term="学习笔记" scheme="http://me.lizhooh.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redis" scheme="http://me.lizhooh.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用 Jenkins 进行前端自动部署（使用记录）</title>
    <link href="http://me.lizhooh.com//stories/2021/02/%E5%89%8D%E7%AB%AF/%E4%BD%BF%E7%94%A8%20Jenkins%20%E8%BF%9B%E8%A1%8C%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%89/"/>
    <id>http://me.lizhooh.com//stories/2021/02/前端/使用 Jenkins 进行前端自动部署（使用记录）/</id>
    <published>2021-02-07T14:19:46.000Z</published>
    <updated>2021-06-15T06:10:52.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Jenkins 是开源 CI/CD 软件领导者， 提供超过 1000 个插件来支持构建、部署、自动化， 满足任何项目的需要。</p><p><img src="/assets/image/2019/2/20190226154957.jpg" alt></p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在这里选择对应系统的安装包：<a href="https://jenkins.io/zh/download/" target="_blank" rel="noopener">https://jenkins.io/zh/download/</a><br>参考这篇文章在 window 上安装：<a href="https://jenkins.io/zh/blog/2019/02/01/windows-installers/" target="_blank" rel="noopener">https://jenkins.io/zh/blog/2019/02/01/windows-installers/</a></p><p>安装完成后会自动启动服务（jenkins.exe），打开：<a href="http://127.0.0.1:8080/login，这时候安装提示完成相关过程即可。" target="_blank" rel="noopener">http://127.0.0.1:8080/login，这时候安装提示完成相关过程即可。</a></p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2019/2/20190226155743.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <p>完成之后会进入首页，可以看到没有任何的工作任务。</p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2019/2/20190226161104.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <h2 id="配置-Nodejs-插件"><a href="#配置-Nodejs-插件" class="headerlink" title="配置 Nodejs 插件"></a>配置 Nodejs 插件</h2><p>打开插件：<code>系统管理</code> -&gt; <code>插件管理</code>。</p><p>如果不幸看到以下情景，问题出现在网络上。</p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2019/2/20190226162200.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <p>那么点击 advanced，在 <code>Update Site</code> 里把 url 更换为：<code>http://mirror.xmission.com/jenkins/updates/update-center.json</code>。</p><p>如果插件列表为空，打开 Nodejs 插件：<a href="https://plugins.jenkins.io/nodejs。" target="_blank" rel="noopener">https://plugins.jenkins.io/nodejs。</a></p><p>下载 nodejs.hpi，在 advanced 里上传文件即可。</p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2019/2/20190226162200.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <p>安装成功的标志：</p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2019/2/20190226165311.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <p>接着在 <code>系统管理</code> -&gt; <code>全局工具配置</code>，配置 Nodejs 的版本。</p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2019/2/20190226170241.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <h2 id="创建-Nodejs-工作任务"><a href="#创建-Nodejs-工作任务" class="headerlink" title="创建 Nodejs 工作任务"></a>创建 Nodejs 工作任务</h2><p>选择 <code>newJob</code>，输入名称，现在自由风格的项目，开始进入配置。</p><p>编辑编译时的命令。</p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2019/2/20190226172854.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://jenkins.io/zh/" target="_blank" rel="noopener">https://jenkins.io/zh/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Jenkins 是开源 CI/CD 软件领导者， 提供超过 1000 个插件来支持构建、部署、自动化， 满足任何项目的需要。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/image/2019/2/20190226154957.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://me.lizhooh.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://me.lizhooh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>高效的前端 Tree 结构渲染与读取算法</title>
    <link href="http://me.lizhooh.com//stories/2020/10/%E5%89%8D%E7%AB%AF/%E9%AB%98%E6%95%88%E7%9A%84%E5%89%8D%E7%AB%AF%20Tree%20%E7%BB%93%E6%9E%84%E6%B8%B2%E6%9F%93%E4%B8%8E%E8%AF%BB%E5%8F%96%E7%AE%97%E6%B3%95/"/>
    <id>http://me.lizhooh.com//stories/2020/10/前端/高效的前端 Tree 结构渲染与读取算法/</id>
    <published>2020-10-08T11:49:45.000Z</published>
    <updated>2021-06-15T06:10:52.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端最烦的是渲染树结构了，单纯渲染树结构还行，直接一个递归渲染即可，最怕渲染之后各种修改数据，主要是麻烦。</p><p>最后，不断渲染树结构的提炼，发现了一种可以很搞笑的渲染与读取的算法，好吧根本不是正规算法，是我 YY 的。</p><a id="more"></a><h2 id="常规递归渲染"><a href="#常规递归渲染" class="headerlink" title="常规递归渲染"></a>常规递归渲染</h2><p>在 React 里渲染一个树结构的界面，假设树的数据为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tree = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    titie: <span class="string">'node1'</span>,</span><br><span class="line">    pid: <span class="literal">null</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        titie: <span class="string">'node3'</span>,</span><br><span class="line">        pid: <span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">4</span>,</span><br><span class="line">        titie: <span class="string">'node4'</span>,</span><br><span class="line">        pid: <span class="number">1</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            id: <span class="number">5</span>,</span><br><span class="line">            titie: <span class="string">'node5'</span>,</span><br><span class="line">            pid: <span class="number">4</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    titie: <span class="string">'node2'</span>,</span><br><span class="line">    pid: <span class="literal">null</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>渲染树结构有几个必须的要点：<code>pid</code> 和 <code>children</code>。用 pid 表达父级的 id，或者用 parent 表达父节点的引用，用 children 表达直接的数组。</p><p>一般后端会给一个扁平化的数组列表给你，前端自己组装成 tree 结构，具体怎么组装就不说了，有个 <code>array-to-tree</code> 的库可以解决。</p><p>拿到这个 tree 结构后，这时前端的渲染时这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归渲染树</span></span><br><span class="line"><span class="keyword">const</span> renderNodeTree = <span class="function">(<span class="params">list: INode[], pNode?: INode</span>) =&gt;</span> (</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &#123;list.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">      &lt;li key=&#123;item.id&#125;&gt;</span><br><span class="line">        &lt;span onClick=&#123;onItemClick(item)&#125;&gt;</span><br><span class="line">          &#123;item.title&#125;</span><br><span class="line">        &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &#123;item.children &amp;&amp; renderNodeTree(item.children, item)&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>li&gt;</span><br><span class="line">    ))&#125;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>是的，采用递归渲染的方式，在 React 里很容易实现，在 Vue 里我就不知道怎么实现了。</p><p>但是这样有一个问题，当点击某个节点时，对这个节点的 title 进行修改，前端有两种做法：</p><ol><li><p>副作用修改，自己对这个节点的引用进行修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onItemClick = <span class="function"><span class="params">item</span> =&gt;</span> <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  item.title = <span class="string">'abc'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改起来极其简单，但是这样会面临一个问题就是副作用的问题，除法你的 tree 从 props 传进来做了 deepcopy。</p></li><li>递归到目标节点替换一个新的对象，写起来有点蛋疼，用 loadash 的 set，这里不列出代码。</li></ol><h2 id="改良算法"><a href="#改良算法" class="headerlink" title="改良算法"></a>改良算法</h2><p>我的改良想法是，从后端拿到扁平化的数组后（raw），创建一个字典。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组转成字典结构</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">list</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">key</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">selector</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toDictionary = (list, key, selector): &#123; [k: string]: any &#125; =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> list.reduce(<span class="function">(<span class="params">obj, val</span>) =&gt;</span> (&#123;</span><br><span class="line">    ...obj,</span><br><span class="line">    [val[key]]: selector ? selector(val) : val</span><br><span class="line">  &#125;), &#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的树结构原生数据是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> raw = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'node1'</span>, <span class="attr">pid</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'node2'</span>, <span class="attr">pid</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'node3'</span>, <span class="attr">pid</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">title</span>: <span class="string">'node4'</span>, <span class="attr">pid</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">title</span>: <span class="string">'node5'</span>, <span class="attr">pid</span>: <span class="number">4</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>打一个字典之后变成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dictionary = &#123;</span><br><span class="line">  <span class="number">1</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'node1'</span>, <span class="attr">pid</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  <span class="number">2</span>: &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'node2'</span>, <span class="attr">pid</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  <span class="number">3</span>: &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'node3'</span>, <span class="attr">pid</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="number">4</span>: &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">title</span>: <span class="string">'node4'</span>, <span class="attr">pid</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="number">5</span>: &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">title</span>: <span class="string">'node5'</span>, <span class="attr">pid</span>: <span class="number">4</span> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，是前端的渲染问题，没办法前端必须用 tree 结构渲染，但是这时只创建一个 id 节点的树。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tree = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">children</span>: [&#123; <span class="attr">id</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">children</span>: [&#123; <span class="attr">id</span>: <span class="number">5</span> &#125;] &#125;] &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>是的看起来很简洁，那么渲染的时候变成这样了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归渲染树</span></span><br><span class="line"><span class="keyword">const</span> renderNodeTree = <span class="function">(<span class="params">list: INode[], pNode?: INode</span>) =&gt;</span> (</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &#123;list.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">      &lt;li key=&#123;item.id&#125;&gt;</span><br><span class="line">        &lt;span onClick=&#123;onItemClick(item)&#125;&gt;</span><br><span class="line">          &#123;dictionary[item.id].title&#125;</span><br><span class="line">        &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &#123;item.children &amp;&amp; renderNodeTree(item.children, item)&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>li&gt;</span><br><span class="line">    ))&#125;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>当点击某个节点时，对这个节点的 title 进行修改，就是这么简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onItemClick = item = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当然也可以直接副作用，这里的副作用影响非常小</span></span><br><span class="line">  dictionary[item.id] = &#123;</span><br><span class="line">    ...dictionary[item.id],</span><br><span class="line">    title: <span class="string">'abc'</span></span><br><span class="line">  &#125;</span><br><span class="line">  setDictionary(&#123; ...dictionary &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面对新的需求"><a href="#面对新的需求" class="headerlink" title="面对新的需求"></a>面对新的需求</h2><p>好，接下来来点更高级的需求就是，当子节点全选时，父节点要被自动选。</p><p>这时，字典的数据格式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dictionary = &#123;</span><br><span class="line">  <span class="number">1</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'node1'</span>, <span class="attr">pid</span>: <span class="literal">null</span>, <span class="attr">checked</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  <span class="number">2</span>: &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'node2'</span>, <span class="attr">pid</span>: <span class="literal">null</span>, <span class="attr">checked</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  <span class="number">3</span>: &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'node3'</span>, <span class="attr">pid</span>: <span class="number">1</span>, <span class="attr">checked</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  <span class="number">4</span>: &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">title</span>: <span class="string">'node4'</span>, <span class="attr">pid</span>: <span class="number">1</span>, <span class="attr">checked</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  <span class="number">5</span>: &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">title</span>: <span class="string">'node5'</span>, <span class="attr">pid</span>: <span class="number">4</span>, <span class="attr">checked</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用一个 checked 标识是否被选中了。</p><p>实现的关键点在于统计父级下的子节点选中的数量问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onItemClick = item = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (dictionary[item.id].pid === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  dictionary[item.id] = !item.checked</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> arr = []</span><br><span class="line">  <span class="built_in">Object</span>.values(dictionary).forEach(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.pid === dictionary[item.id].pid) &#123;</span><br><span class="line">      arr.push(node)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> all = arr.length</span><br><span class="line">  <span class="keyword">const</span> count = arr.filter(<span class="function"><span class="params">i</span> =&gt;</span> i.checked).length</span><br><span class="line">  <span class="keyword">if</span> (count === all) &#123;</span><br><span class="line">    <span class="comment">// 更新父节点的 checked，随便缓存一下计算的个数</span></span><br><span class="line">    dictionary[item.pid].checked = <span class="literal">true</span></span><br><span class="line">    dictionary[item.pid].all = all</span><br><span class="line">    dictionary[item.pid].count = count</span><br><span class="line">  &#125;</span><br><span class="line">  setDictionary(&#123; ...dictionary &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 dictionary 是字典结构，所以读取，遍历都非常方便，不像树结构，需要用递归遍历。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前端最烦的是渲染树结构了，单纯渲染树结构还行，直接一个递归渲染即可，最怕渲染之后各种修改数据，主要是麻烦。&lt;/p&gt;
&lt;p&gt;最后，不断渲染树结构的提炼，发现了一种可以很搞笑的渲染与读取的算法，好吧根本不是正规算法，是我 YY 的。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://me.lizhooh.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://me.lizhooh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>可信的 http 服务互调鉴权</title>
    <link href="http://me.lizhooh.com//stories/2020/10/Nodejs/%E5%8F%AF%E4%BF%A1%E7%9A%84%20http%20%E6%9C%8D%E5%8A%A1%E4%BA%92%E8%B0%83%E9%89%B4%E6%9D%83/"/>
    <id>http://me.lizhooh.com//stories/2020/10/Nodejs/可信的 http 服务互调鉴权/</id>
    <published>2020-10-07T13:01:34.000Z</published>
    <updated>2021-06-15T06:10:52.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>场景，A 服务是自家服务，B 服务是合作的第三方公司的服务。现在要做的是 A 服务对 B 服务发起请求，B 服务执行完成后，会异步的进行回调，对回调的 http 地址发起回调的内容请求。这样就来了一个问题，A 和 B 怎么确保是对方发送的请求？</p><p>可以什么都不做，这样的风险被人抓包挖出地址后不断的轰炸。当然是需要做<strong>鉴权</strong>功能。</p><a id="more"></a><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>有些服务是在收到请求后不能立刻处理完成，例如离线的计算任务，异步的计算任务，这种当然不能立刻告诉你结果，可能在未来几秒，几分钟后才计算完，把结果告诉你。那么具体怎么告诉法呢？当你请求时，需要携带回调的地址，计算完成后对这个地址进行请求，这样就构成了一个异步回调的形式。</p><h2 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h2><p>首先，鉴权存在加密的过程，是一个不可逆加密，密钥双发都知道，加密内容可以是一个可刷新的动态值。</p><p>这里举出 HmacSHA1 的加密形式。</p><p>在 A 向 B 发起计算的请求时，在 header 里携带鉴权信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'x-sg-token'</span>: <span class="string">'xxxx'</span>,</span><br><span class="line"><span class="string">'x-sg-signature'</span>: <span class="string">'P76xYs3puRoSWnx4cniypoU0K6v1PeHk9bEzdRUw'</span></span><br></pre></td></tr></table></figure><p>当然有一个固定 key 是不携带在 header 里的，而是写死在代码里。</p><p>其中 <code>x-sg-key</code> 是固定已知值（可看 webhook 的配置得知），需要你的服务记忆住，<code>x-sg-token</code> 是可刷新值，每次发起推送请求时在 header 里携带。</p><p>在加密完成后，你需要用你生成的 <code>signature</code> 与 header 里的 <code>x-sg-signature</code> 进行比较来确定是 A 服务器发送的请求。同理，在 B 执行回调请求时，A 也会做同样的鉴权操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  url: <span class="string">'http://xxx.com'</span>,    <span class="comment">// replyUrl 地址</span></span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'content-type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'x-sg-token'</span>: <span class="string">'xxxx'</span>,</span><br><span class="line">    <span class="string">'x-sg-signature'</span>: <span class="string">'076xYs3puuoSWnx4cniypoU0K6v1SeHk9bEzdRUw'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: [],</span><br><span class="line">  json: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request(options, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(error);</span><br><span class="line">  <span class="built_in">console</span>.log(body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 B 服务里需要对加密进行验证，怎么验证？对 <code>x-sg-key</code> 和 <code>x-sg-token</code> 进行 HmacSHA1 加密，得到了 signature 与 header 的 <code>x-sg-signature</code> 进行比较，如果相同则是受信用户，否则这个请求会被抛弃。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hmacsha1 = <span class="built_in">require</span>(<span class="string">'hmacsha1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">'sugo_data'</span></span><br><span class="line"><span class="keyword">const</span> token = <span class="string">'xxxx'</span></span><br><span class="line"><span class="keyword">const</span> signature = hmacsha1(key, token);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(signature)</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>当然除了这种 http 回调的方式来实现异步的消息指令，其实还可以根据 redis pub/sub 的模式来实现，在 A 发起请求时把 redis 的地址，还有监听的 key 告诉 B 服务，B 服务在计算完成后对 key 进行 pub，在 A 服务里监听到时触发，获取 key 的值得到回调内容。但是这种方式仅限于内部公司用吧，外部公司，如果不想让别人直接访问你的 redis 可不能这样干之。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;场景，A 服务是自家服务，B 服务是合作的第三方公司的服务。现在要做的是 A 服务对 B 服务发起请求，B 服务执行完成后，会异步的进行回调，对回调的 http 地址发起回调的内容请求。这样就来了一个问题，A 和 B 怎么确保是对方发送的请求？&lt;/p&gt;
&lt;p&gt;可以什么都不做，这样的风险被人抓包挖出地址后不断的轰炸。当然是需要做&lt;strong&gt;鉴权&lt;/strong&gt;功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="http://me.lizhooh.com/categories/Nodejs/"/>
    
    
      <category term="后端" scheme="http://me.lizhooh.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Nodejs" scheme="http://me.lizhooh.com/tags/Nodejs/"/>
    
      <category term="Javascript" scheme="http://me.lizhooh.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Sequelize 解决中间表字段累赘的问题</title>
    <link href="http://me.lizhooh.com//stories/2020/09/Mysql/Sequelize%20%E8%A7%A3%E5%86%B3%E4%B8%AD%E9%97%B4%E8%A1%A8%E5%AD%97%E6%AE%B5%E7%B4%AF%E8%B5%98%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://me.lizhooh.com//stories/2020/09/Mysql/Sequelize 解决中间表字段累赘的问题/</id>
    <published>2020-09-05T12:32:53.000Z</published>
    <updated>2021-06-15T06:10:52.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Sequelize 如果是创建 <code>N : M</code> 关联，自动创建关联表就没有出现中间表字段累赘的问题，但是如果是自动创建中间关联表又不满足业务需求，因为中间不仅只存关联的两个表的信息，还有其他信息要存储。这样一来，就手动创建呗。</p><p>手动创建就出现了一个中间表字段累赘的问题，具体表现看下面。</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>这里的累赘是指查询出来时多了一层嵌套，而不是数据库的累赘。目前想到的解决方案是基于虚拟字段来实现。</p><p>以下示例代码使用 <code>sequelize</code> 和 <code>sequelize-typescript</code> 编写。</p><p>Sequelize 关联中间表会出现数据累赘的问题，何为累赘，看一下的模型定义：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HasMany</span>(<span class="function"><span class="params">()</span> =&gt;</span> UserGroupsMeasureModel, <span class="string">'userGroupsId'</span>)</span><br><span class="line">userGroupsMeasures: UserGroupsMeasureModel[]</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>这里定义了一个一对多关联，字段为 userGroupsMeasures。</li><li>UserGroupsMeasureModel 是一个中间表，其关联着 MeasureModel 表。</li><li>因为 UserGroups 会有多个 Measure，因此采用了中间表的形式。</li></ul><p>查询列表时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  include: [</span><br><span class="line">    &#123;</span><br><span class="line">      model: UserGroupsMeasureModel,</span><br><span class="line">      attributes: [<span class="string">'id'</span>, <span class="string">'count'</span>, <span class="string">'index'</span>],</span><br><span class="line">      include: [&#123;</span><br><span class="line">        model: MeasureModel,</span><br><span class="line">        attributes: [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'showFormat'</span>, <span class="string">'styName'</span>]</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询列表生成的结构，这样一来前端就有意见了，能不嵌套这么深吗？</p><p>出现这种问题的原因是 Sequelize 并不知你要显示哪些格式，而是按照中间表的关联结构来输出格式，因此就输出这些格式了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"userGroupsMeasures"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"ebPGLfO0m3k"</span>,</span><br><span class="line">    <span class="string">"count"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"index"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">"measure"</span>: &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"Zymh8VklnS"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"哈哈14"</span>,</span><br><span class="line">        <span class="string">"styName"</span>: <span class="string">"da231313z_h01st2kchtg"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"DwfPFuKT0Ph"</span>,</span><br><span class="line">    <span class="string">"count"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"index"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"measure"</span>: &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"94Co7H05U"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"哈哈 1"</span>,</span><br><span class="line">        <span class="string">"styName"</span>: <span class="string">"da231313z_asdasd"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>那么前端想要这样的结构呢？怎么愉快并且可维护性的实现？下面使用 getter 和虚拟字段来实现。</p><p>Sequelize 的虚拟字段并不会在数据库里面生成：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HasMany</span>(<span class="function"><span class="params">()</span> =&gt;</span> UserGroupsMeasureModel, <span class="string">'userGroupsId'</span>)</span><br><span class="line">userGroupsMeasures: UserGroupsMeasureModel[]</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(&#123;</span><br><span class="line">  <span class="keyword">type</span>: DataType.VIRTUAL,</span><br><span class="line">  comment: <span class="string">'指标虚拟字段'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">get</span> measures() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.userGroupsMeasures.map(<span class="function">(<span class="params">i</span>) =&gt;</span> (&#123;</span><br><span class="line">    id: i.measure.id,</span><br><span class="line">    name: i.measure.name,</span><br><span class="line">    index: i.index,</span><br><span class="line">    count: i.count,</span><br><span class="line">    styName: i.measure.styName</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询列表时，把 userGroupsMeasures 过滤了即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">attributes: &#123;</span><br><span class="line">  exclude: [</span><br><span class="line">    <span class="string">'deletedAt'</span>, <span class="string">'updatedAt'</span>, <span class="string">'params'</span>,</span><br><span class="line">    <span class="string">'excludeParams'</span>, <span class="string">'userGroupsMeasures'</span>, <span class="string">'userGroupsTags'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>最后查出来的格式是这样的：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">"measures": [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"Zymh8VklnS"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"哈哈14"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"styName"</span>: <span class="string">"da231313z_h01st2kchtg"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"94Co7H05U"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"哈哈 1"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"styName"</span>: <span class="string">"da231313z_asdasd"</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Sequelize 如果是创建 &lt;code&gt;N : M&lt;/code&gt; 关联，自动创建关联表就没有出现中间表字段累赘的问题，但是如果是自动创建中间关联表又不满足业务需求，因为中间不仅只存关联的两个表的信息，还有其他信息要存储。这样一来，就手动创建呗。&lt;/p&gt;
&lt;p&gt;手动创建就出现了一个中间表字段累赘的问题，具体表现看下面。&lt;/p&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://me.lizhooh.com/categories/Mysql/"/>
    
    
      <category term="数据库" scheme="http://me.lizhooh.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MongoDB" scheme="http://me.lizhooh.com/tags/MongoDB/"/>
    
      <category term="Nodejs" scheme="http://me.lizhooh.com/tags/Nodejs/"/>
    
      <category term="Mysql" scheme="http://me.lizhooh.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 一些高级的类型推断</title>
    <link href="http://me.lizhooh.com//stories/2020/08/Typescript/Typescript%20%E4%B8%80%E4%BA%9B%E9%AB%98%E7%BA%A7%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/"/>
    <id>http://me.lizhooh.com//stories/2020/08/Typescript/Typescript 一些高级的类型推断/</id>
    <published>2020-08-09T14:05:10.000Z</published>
    <updated>2021-06-15T06:10:52.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时候想要做一些高级的推断，发现不行，现在只能这样做了。</p><p>介绍有一个对象 M：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = &#123;</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        add() &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    effects: &#123;</span><br><span class="line">        asyncAdd() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想获取其类型，很简单：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> M = <span class="keyword">typeof</span> m</span><br></pre></td></tr></table></figure><p>如果想获取 reducers 和 effects 的类型呢？也很简单：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Effects = M[<span class="string">'effects'</span>]</span><br><span class="line"><span class="keyword">type</span> Reducers = M[<span class="string">'reducers'</span>]</span><br></pre></td></tr></table></figure><p>如果想写成泛型呢？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Effects&lt;T&gt; = T[<span class="string">'effects'</span>]</span><br></pre></td></tr></table></figure><p>不好意思，这样写会报错，原因在于 T 的约束性问题。那么如何解决？使用 <code>like</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LikeM = &#123;</span><br><span class="line">    reducers: <span class="built_in">any</span>,</span><br><span class="line">    effects: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Effects&lt;T&gt; = T <span class="keyword">extends</span> LikeM ? T[<span class="string">'effects'</span>] : <span class="built_in">any</span></span><br></pre></td></tr></table></figure><p>好这样就能成功推断出来了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有时候想要做一些高级的推断，发现不行，现在只能这样做了。&lt;/p&gt;
&lt;p&gt;介绍有一个对象 M：&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="Typescript" scheme="http://me.lizhooh.com/categories/Typescript/"/>
    
    
      <category term="学习笔记" scheme="http://me.lizhooh.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Javascript" scheme="http://me.lizhooh.com/tags/Javascript/"/>
    
      <category term="前端" scheme="http://me.lizhooh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Typescript" scheme="http://me.lizhooh.com/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>关于 Sequelize Tree 结构的问题</title>
    <link href="http://me.lizhooh.com//stories/2020/07/Mysql/%E5%85%B3%E4%BA%8E%20Sequelize%20Tree%20%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://me.lizhooh.com//stories/2020/07/Mysql/关于 Sequelize Tree 结构的问题/</id>
    <published>2020-07-27T13:42:14.000Z</published>
    <updated>2021-06-15T06:10:52.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天碰到关于 Sequelize Tree 结构的问题 …</p><h2 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h2><p>需要存储一个 Tree 结构，因为数据库是关系型数据库，存储方面采用 pid 关联的方式。</p><p>这是数据库存的数据格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> row = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'节点一'</span>, <span class="attr">pid</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'节点二'</span>, <span class="attr">pid</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'节点三'</span>, <span class="attr">pid</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">title</span>: <span class="string">'节点四'</span>, <span class="attr">pid</span>: <span class="number">2</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><a id="more"></a><p>后面需要转成前端渲染的多维结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tree = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'节点一'</span>, <span class="attr">pid</span>: <span class="literal">null</span>, <span class="attr">children</span>: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'节点二'</span>, <span class="attr">pid</span>: <span class="number">1</span>, <span class="attr">children</span>: [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">title</span>: <span class="string">'节点四'</span>, <span class="attr">pid</span>: <span class="number">2</span> &#125;</span><br><span class="line">        ] &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'节点三'</span>, <span class="attr">pid</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    ] &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>好，那么在 Sequelize 里怎么写？</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面来看看如何用 Sequelize 实现逻辑代码。</p><h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>首先创建一个 Node 模型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Node = sequelize.define(<span class="string">'node'</span>, &#123;</span><br><span class="line">    title: DataTypes.STRING,</span><br><span class="line">    level: DataTypes.INTEGER,</span><br><span class="line">&#125;, config);</span><br></pre></td></tr></table></figure><h3 id="设置关联关系"><a href="#设置关联关系" class="headerlink" title="设置关联关系"></a>设置关联关系</h3><p>设置关联，主要是跟自己关联：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关联父级</span></span><br><span class="line">Node.belongsTo(Node, &#123; <span class="attr">foreignKey</span>: <span class="string">'pid'</span>, <span class="attr">as</span>: <span class="string">'parent'</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="逻辑代码实现"><a href="#逻辑代码实现" class="headerlink" title="逻辑代码实现"></a>逻辑代码实现</h3><p>先创建一系列的节点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> node1 = <span class="keyword">await</span> Node.create(&#123; <span class="attr">title</span>: <span class="string">'节点 1'</span>, <span class="attr">level</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> node2 = <span class="keyword">await</span> Node.create(&#123; <span class="attr">title</span>: <span class="string">'节点 2'</span>, <span class="attr">level</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> node3 = <span class="keyword">await</span> Node.create(&#123; <span class="attr">title</span>: <span class="string">'节点 3'</span>, <span class="attr">level</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> node4 = <span class="keyword">await</span> Node.create(&#123; <span class="attr">title</span>: <span class="string">'节点 4'</span>, <span class="attr">level</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> node5 = <span class="keyword">await</span> Node.create(&#123; <span class="attr">title</span>: <span class="string">'节点 5'</span>, <span class="attr">level</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> node6 = <span class="keyword">await</span> Node.create(&#123; <span class="attr">title</span>: <span class="string">'节点 6'</span>, <span class="attr">level</span>: <span class="number">3</span> &#125;);</span><br></pre></td></tr></table></figure><p>之后，设置每个节点之间的关系：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 node2 节点的父级为 node1</span></span><br><span class="line"><span class="keyword">await</span> node2.setParent(node1);</span><br><span class="line"><span class="keyword">await</span> node3.setParent(node1);</span><br><span class="line"><span class="keyword">await</span> node4.setParent(node2);</span><br><span class="line"><span class="keyword">await</span> node5.setParent(node2);</span><br><span class="line"><span class="keyword">await</span> node6.setParent(node3);</span><br></pre></td></tr></table></figure><p>节点的列表查询：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodeList = <span class="keyword">await</span> Node.findAll();</span><br></pre></td></tr></table></figure><p>查询的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   &#123; <span class="attr">"id"</span>: <span class="number">1</span>, <span class="attr">"title"</span>: <span class="string">"节点 1"</span>, <span class="attr">"level"</span>: <span class="number">0</span>, <span class="attr">"pid"</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">"id"</span>: <span class="number">2</span>, <span class="attr">"title"</span>: <span class="string">"节点 2"</span>, <span class="attr">"level"</span>: <span class="number">1</span>, <span class="attr">"pid"</span>: <span class="number">1</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">"id"</span>: <span class="number">3</span>, <span class="attr">"title"</span>: <span class="string">"节点 3"</span>, <span class="attr">"level"</span>: <span class="number">1</span>, <span class="attr">"pid"</span>: <span class="number">1</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">"id"</span>: <span class="number">4</span>, <span class="attr">"title"</span>: <span class="string">"节点 4"</span>, <span class="attr">"level"</span>: <span class="number">2</span>, <span class="attr">"pid"</span>: <span class="number">2</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">"id"</span>: <span class="number">5</span>, <span class="attr">"title"</span>: <span class="string">"节点 5"</span>, <span class="attr">"level"</span>: <span class="number">2</span>, <span class="attr">"pid"</span>: <span class="number">2</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">"id"</span>: <span class="number">6</span>, <span class="attr">"title"</span>: <span class="string">"节点 6"</span>, <span class="attr">"level"</span>: <span class="number">3</span>, <span class="attr">"pid"</span>: <span class="number">3</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>好的，之后考虑怎么进行转换了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">createTree</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findByIdAndAddChildren</span>(<span class="params">list, id, data, level = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// pid 为 null，压到顶层</span></span><br><span class="line">        <span class="keyword">if</span> (data.pid === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> l = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> [...list, data];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = list[i];</span><br><span class="line">            <span class="comment">// 找到节点了</span></span><br><span class="line">            <span class="keyword">if</span> (item.id === id) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(item.children)) item.children = [];</span><br><span class="line">                item.children = [data, ...item.children];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item.children)) &#123;</span><br><span class="line">                item.children = findByIdAndAddChildren(item.children, id, data, level + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要排序一下哦</span></span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">        .sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.level - b.level)</span><br><span class="line">        .reduce(<span class="function">(<span class="params">arr, item</span>) =&gt;</span> findByIdAndAddChildren(arr, item.pid, item), []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://sequelize.org/master/manual/assocs.html" target="_blank" rel="noopener">https://sequelize.org/master/manual/assocs.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天碰到关于 Sequelize Tree 结构的问题 …&lt;/p&gt;
&lt;h2 id=&quot;业务需求&quot;&gt;&lt;a href=&quot;#业务需求&quot; class=&quot;headerlink&quot; title=&quot;业务需求&quot;&gt;&lt;/a&gt;业务需求&lt;/h2&gt;&lt;p&gt;需要存储一个 Tree 结构，因为数据库是关系型数据库，存储方面采用 pid 关联的方式。&lt;/p&gt;
&lt;p&gt;这是数据库存的数据格式：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; row = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;节点一&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;pid&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;节点二&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;pid&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;节点三&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;pid&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;节点四&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;pid&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://me.lizhooh.com/categories/Mysql/"/>
    
    
      <category term="数据库" scheme="http://me.lizhooh.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MongoDB" scheme="http://me.lizhooh.com/tags/MongoDB/"/>
    
      <category term="Nodejs" scheme="http://me.lizhooh.com/tags/Nodejs/"/>
    
      <category term="Mysql" scheme="http://me.lizhooh.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>关于 Sequelize 关联 N：M 的问题</title>
    <link href="http://me.lizhooh.com//stories/2020/07/Mysql/%E5%85%B3%E4%BA%8E%20Sequelize%20%E5%85%B3%E8%81%94%20N%EF%BC%9AM%20%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://me.lizhooh.com//stories/2020/07/Mysql/关于 Sequelize 关联 N：M 的问题/</id>
    <published>2020-07-25T13:42:14.000Z</published>
    <updated>2021-06-15T06:10:52.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于 Sequelize 关联 N：M 的问题，以一个业务示例来讲解。</p><h2 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h2><p>模型：<code>用户</code>，<code>角色</code>，<code>部门</code></p><ul><li>在创建用户时可以选择多个角色，可以选择一个部门。</li><li>在创建角色时可以选择多个部门，需要记录创建者用户。</li><li>在创建部门时，需要记录创建者用户。</li></ul><a id="more"></a><blockquote><p>ps: 部门是用于控制权限的。</p></blockquote><p>那么总结来说：</p><ul><li>一个用户对应着多个角色，对应者一个部门。</li><li>一个角色关联着多个使用者，对应一个创建者。</li><li>一个部门关联着多个使用者，对应一个创建者。</li></ul><p>这是典型的 N：M 超级多对多关系。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面来看看如何用 Sequelize 实现逻辑代码。</p><h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>首先创建模型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户</span></span><br><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">    name: DataTypes.STRING,</span><br><span class="line">&#125;, config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 角色</span></span><br><span class="line"><span class="keyword">const</span> Role = sequelize.define(<span class="string">'role'</span>, &#123;</span><br><span class="line">    title: DataTypes.STRING,</span><br><span class="line">&#125;, config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部门</span></span><br><span class="line"><span class="keyword">const</span> Agency = sequelize.define(<span class="string">'agency'</span>, &#123;</span><br><span class="line">    title: DataTypes.STRING,</span><br><span class="line">&#125;, config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户与角色多对多，之间的中间层</span></span><br><span class="line"><span class="keyword">const</span> UserRole = sequelize.define(<span class="string">'userRole'</span>, &#123;&#125;, config);</span><br></pre></td></tr></table></figure><h3 id="设置关联关系"><a href="#设置关联关系" class="headerlink" title="设置关联关系"></a>设置关联关系</h3><p>关联用户与角色之间的关系（多对多）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个角色对应着有多个使用者</span></span><br><span class="line">User.belongsToMany(Role, &#123; <span class="attr">through</span>: UserRole &#125;);</span><br><span class="line">Role.belongsToMany(User, &#123; <span class="attr">through</span>: UserRole &#125;);</span><br></pre></td></tr></table></figure><p>关联角色与创建者的关系（一对一）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个角色对应着一个创建者</span></span><br><span class="line"><span class="keyword">const</span> RoleCreator = Role.belongsTo(User, &#123; <span class="attr">as</span>: <span class="string">'creator'</span> &#125;);</span><br></pre></td></tr></table></figure><p>关联角色与部门之间的关系（一对多）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（一对多）一个角色对应着多个部门</span></span><br><span class="line">Role.hasMany(Agency);</span><br></pre></td></tr></table></figure><p>关联部门与创建者的关系（一对一）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个部门对应着一个创建者</span></span><br><span class="line"><span class="keyword">const</span> AgencyCreator = Agency.belongsTo(User, &#123; <span class="attr">as</span>: <span class="string">'creator'</span> &#125;);</span><br></pre></td></tr></table></figure><p>一个新用户需要选择一个部门：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （一对一）一个用户对应着一个机构，一个机构被多个用户对应（无操作）</span></span><br><span class="line">User.hasOne(Agency);</span><br></pre></td></tr></table></figure><h3 id="逻辑代码实现"><a href="#逻辑代码实现" class="headerlink" title="逻辑代码实现"></a>逻辑代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去掉不必要的字段</span></span><br><span class="line"><span class="keyword">const</span> through = &#123; <span class="attr">attributes</span>: [] &#125;;</span><br></pre></td></tr></table></figure><h4 id="部门"><a href="#部门" class="headerlink" title="部门"></a>部门</h4><p>创建部门：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> agency1 = <span class="keyword">await</span> Agency.create(&#123; <span class="attr">title</span>: <span class="string">'事业部'</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> agency2 = <span class="keyword">await</span> Agency.create(&#123; <span class="attr">title</span>: <span class="string">'产品部'</span> &#125;);</span><br></pre></td></tr></table></figure><p>这样就创建的部门了，接下来添加部门的创建者：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user1 = <span class="keyword">await</span> User.create(&#123; <span class="attr">name</span>: <span class="string">'小品'</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> user2 = <span class="keyword">await</span> User.create(&#123; <span class="attr">name</span>: <span class="string">'小盘'</span> &#125;);</span><br><span class="line"><span class="comment">// 部门的创建者</span></span><br><span class="line"><span class="keyword">await</span> agency1.setCreator(user1);</span><br><span class="line"><span class="keyword">await</span> agency2.setCreator(user2);</span><br></pre></td></tr></table></figure><p>单个部门的查询：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个部门</span></span><br><span class="line"><span class="keyword">const</span> agency = <span class="keyword">await</span> Agency.findOne(&#123;</span><br><span class="line">    where: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    include: [AgencyCreator],</span><br><span class="line">    through: through,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回的结果数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"事业部"</span>,</span><br><span class="line">    <span class="attr">"roleId"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"userId"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"creatorId"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"creator"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"小品"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部门列表查询：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> agencyList = <span class="keyword">await</span> Agency.findOne(&#123;</span><br><span class="line">    offset: <span class="number">0</span>, <span class="attr">limit</span>: <span class="number">10</span>,</span><br><span class="line">    include: [AgencyCreator],</span><br><span class="line">    through: through,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回的结果数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"事业部"</span>,</span><br><span class="line">    <span class="attr">"roleId"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"userId"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"creatorId"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"creator"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"小品"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"产品部"</span>,</span><br><span class="line">    <span class="attr">"roleId"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"userId"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">"creatorId"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"creator"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"小盘"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>更新/删除部门，更新部门一般不会更新创建者，删除时需要检查是否有引用关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除时，检查 userId 和 roleId 是否为空</span></span><br></pre></td></tr></table></figure><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><p>创建角色：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> role1 = <span class="keyword">await</span> Role.create(&#123; <span class="attr">title</span>: <span class="string">'研发权限'</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> role2 = <span class="keyword">await</span> Role.create(&#123; <span class="attr">title</span>: <span class="string">'产品权限'</span> &#125;);</span><br></pre></td></tr></table></figure><p>接下来添加角色的创建者：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user1 = <span class="keyword">await</span> User.create(&#123; <span class="attr">name</span>: <span class="string">'小赵'</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> user2 = <span class="keyword">await</span> User.create(&#123; <span class="attr">name</span>: <span class="string">'小瓶'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键的一步（记录角色的创建者）</span></span><br><span class="line"><span class="keyword">await</span> role1.setCreator(user1);</span><br><span class="line"><span class="keyword">await</span> role2.setCreator(user2);</span><br></pre></td></tr></table></figure><p>接下来添加部门：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建角色时，需要选择多个部门</span></span><br><span class="line"><span class="keyword">await</span> role1.addAgency([agency1, agency2]);</span><br><span class="line"><span class="keyword">await</span> role2.addAgency([agency1]);</span><br></pre></td></tr></table></figure><p>角色列表查询：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要显示时要求把机构，创建者，关联的用户带出来</span></span><br><span class="line"><span class="keyword">const</span> role = <span class="keyword">await</span> Role.findAll(&#123;</span><br><span class="line">    offset: <span class="number">0</span>, <span class="attr">limit</span>: <span class="number">10</span>,</span><br><span class="line">    include: [&#123;</span><br><span class="line">        model: User,</span><br><span class="line">        include: [&#123;</span><br><span class="line">            model: Role,</span><br><span class="line">            through: through,</span><br><span class="line">            include: [RoleCreator]</span><br><span class="line">        &#125;, Agency],</span><br><span class="line">        through: through,</span><br><span class="line">    &#125;, Agency, RoleCreator],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回的结果数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"产品权限"</span>,</span><br><span class="line">  <span class="attr">"creatorId"</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"users"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">      <span class="attr">"roles"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"研发权限"</span>,</span><br><span class="line">          <span class="attr">"creatorId"</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"creator"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"小赵"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"产品权限"</span>,</span><br><span class="line">          <span class="attr">"creatorId"</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"creator"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"小瓶"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"agency"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"事业部"</span>,</span><br><span class="line">        <span class="attr">"roleId"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"userId"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">"creatorId"</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"小花"</span>,</span><br><span class="line">      <span class="attr">"roles"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"研发权限"</span>,</span><br><span class="line">          <span class="attr">"creatorId"</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"creator"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"小赵"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"产品权限"</span>,</span><br><span class="line">          <span class="attr">"creatorId"</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"creator"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"小瓶"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"agency"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"产品部"</span>,</span><br><span class="line">        <span class="attr">"roleId"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"userId"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">"creatorId"</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"agencys"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"事业部"</span>,</span><br><span class="line">      <span class="attr">"roleId"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"userId"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"creatorId"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"creator"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"小瓶"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>更新/删除角色，更新角色一般不会更新创建者，删除时需要检查是否有引用关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除时，检查 agencys 数组和 users 数组是否为空</span></span><br></pre></td></tr></table></figure><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><p>创建用户：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user1 = <span class="keyword">await</span> User.create(&#123; <span class="attr">name</span>: <span class="string">'小明'</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> user2 = <span class="keyword">await</span> User.create(&#123; <span class="attr">name</span>: <span class="string">'小花'</span> &#125;);</span><br></pre></td></tr></table></figure><p>创建用户时可以选择多个角色：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户创建时，可以选择关联多个角色</span></span><br><span class="line"><span class="keyword">await</span> user1.addRole([role1, role2]);</span><br><span class="line"><span class="keyword">await</span> user2.addRole([role1, role2]);</span><br></pre></td></tr></table></figure><p>创建用户时可以选择单个机构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户创建时，可以选择单个机构</span></span><br><span class="line"><span class="keyword">await</span> user1.setAgency(agency1);</span><br><span class="line"><span class="keyword">await</span> user2.setAgency(agency2);</span><br></pre></td></tr></table></figure><p>用户列表查询：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userList = <span class="keyword">await</span> User.findAll(&#123;</span><br><span class="line">    offset: <span class="number">0</span>, <span class="attr">limit</span>: <span class="number">10</span>,</span><br><span class="line">    include: [&#123;</span><br><span class="line">        model: Role,</span><br><span class="line">        through: through,</span><br><span class="line">    &#125;, Agency],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">  <span class="attr">"roles"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"研发权限"</span>,</span><br><span class="line">      <span class="attr">"creatorId"</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"产品权限"</span>,</span><br><span class="line">      <span class="attr">"creatorId"</span>: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"agency"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"事业部"</span>,</span><br><span class="line">    <span class="attr">"roleId"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"userId"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"creatorId"</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Sequelize 提供关联查询还是挺方便的，但是发现如果很复杂时，Sequelize 帮不了你，你可能需要写原生的 SQL 语句查询。像这种多对多的关联查询，一般需要一个中间表，之后就是无限的 LEFT OUTER JOIN 了。</p><p>秀出部分 SQL 原生查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    roles.id <span class="keyword">as</span> <span class="keyword">id</span>,</span><br><span class="line">    roles.title <span class="keyword">as</span> title,</span><br><span class="line">    agencies.id <span class="keyword">as</span> agencyId,</span><br><span class="line">    agencies.title <span class="keyword">as</span> agencyTitle,</span><br><span class="line">    users.id <span class="keyword">as</span> userId,</span><br><span class="line">    users.name <span class="keyword">as</span> userName</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">roles</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> roleRelateUser <span class="keyword">ON</span> roleRelateUserId.id = roles.roleRelateUserId</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">users</span> <span class="keyword">ON</span> roleRelateUser.userId = users.id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> roleRelateAgency <span class="keyword">ON</span> roleRelateAgency.id = roles.roleRelateAgencyId</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> agency <span class="keyword">ON</span> roleRelateAgency.agencyId = agency.id</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://semlinker.com/node-sequelize-1vm/" target="_blank" rel="noopener">http://semlinker.com/node-sequelize-1vm/</a></li><li><a href="https://sequelize.org/master/manual/creating-with-associations.html" target="_blank" rel="noopener">https://sequelize.org/master/manual/creating-with-associations.html</a></li><li><a href="https://demopark.github.io/sequelize-docs-Zh-CN/core-concepts/assocs.html" target="_blank" rel="noopener">https://demopark.github.io/sequelize-docs-Zh-CN/core-concepts/assocs.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;关于 Sequelize 关联 N：M 的问题，以一个业务示例来讲解。&lt;/p&gt;
&lt;h2 id=&quot;业务需求&quot;&gt;&lt;a href=&quot;#业务需求&quot; class=&quot;headerlink&quot; title=&quot;业务需求&quot;&gt;&lt;/a&gt;业务需求&lt;/h2&gt;&lt;p&gt;模型：&lt;code&gt;用户&lt;/code&gt;，&lt;code&gt;角色&lt;/code&gt;，&lt;code&gt;部门&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在创建用户时可以选择多个角色，可以选择一个部门。&lt;/li&gt;
&lt;li&gt;在创建角色时可以选择多个部门，需要记录创建者用户。&lt;/li&gt;
&lt;li&gt;在创建部门时，需要记录创建者用户。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://me.lizhooh.com/categories/Mysql/"/>
    
    
      <category term="数据库" scheme="http://me.lizhooh.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MongoDB" scheme="http://me.lizhooh.com/tags/MongoDB/"/>
    
      <category term="Nodejs" scheme="http://me.lizhooh.com/tags/Nodejs/"/>
    
      <category term="Mysql" scheme="http://me.lizhooh.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>React Router 4 关于前端守卫</title>
    <link href="http://me.lizhooh.com//stories/2020/07/React/Router/React%20Router%204%20%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E5%AE%88%E5%8D%AB/"/>
    <id>http://me.lizhooh.com//stories/2020/07/React/Router/React Router 4 关于前端守卫/</id>
    <published>2020-07-07T11:12:58.000Z</published>
    <updated>2021-06-15T06:10:52.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于 React Router 4 没有事件系统，因此在前端路由守卫这里比 Vue-Router 做起来麻烦多了，因为监听不到路由的变化。</p><p>那么怎么做呢？React Router 的作者说了，难的都由你们自己实现，哈哈。</p><a id="more"></a><h2 id="官方做法"><a href="#官方做法" class="headerlink" title="官方做法"></a>官方做法</h2><p>官方有<a href="https://reactrouter.com/web/example/auth-workflow" target="_blank" rel="noopener">一个示例</a>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fakeAuth = &#123;</span><br><span class="line">    isAuthenticated: <span class="literal">false</span>,</span><br><span class="line">    authenticate(cb) &#123;</span><br><span class="line">        fakeAuth.isAuthenticated = <span class="literal">true</span>;</span><br><span class="line">        setTimeout(cb, <span class="number">100</span>); <span class="comment">// fake async</span></span><br><span class="line">    &#125;,</span><br><span class="line">    signout(cb) &#123;</span><br><span class="line">        fakeAuth.isAuthenticated = <span class="literal">false</span>;</span><br><span class="line">        setTimeout(cb, <span class="number">100</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AuthButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> history = useHistory();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fakeAuth.isAuthenticated ?</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            Welcome!</span><br><span class="line">            &lt;button</span><br><span class="line">                onClick=&#123;() =&gt; fakeAuth.signout(<span class="function"><span class="params">()</span> =&gt;</span> history.push(<span class="string">'/'</span>))&#125;&gt;</span><br><span class="line">                Sign out</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>p&gt; :</span><br><span class="line">        &lt;p&gt;You are not logged <span class="keyword">in</span>.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    ;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>大致的意思是：你用一个变量存起 token 来，自己写一个 Button 实现在点击时进行检查 token。</p><p>这样的确可以实现，但是只能实现单个页面的权限控制，如果用户直接从 url 进入呢？会出 BUG 的。</p><h2 id="应该怎么做？"><a href="#应该怎么做？" class="headerlink" title="应该怎么做？"></a>应该怎么做？</h2><ul><li>方法一：写一个装饰器，挂在 class component 上</li><li>方法二：或者写一个 HOC 修饰一个 component。</li><li>方法三：编写一个 useAuth 钩子函数，在每一个 page 组件里调用一下这个 hook。</li><li>方法四：基于上面的，再做一步验证。</li></ul><blockquote><p>方法一，方法二这里就不讲了（主要是现在不写 class 组件），说说方法三和方法四。</p></blockquote><p>方法三，编写一个 useAuth：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查 token 默认：不通过会转跳到登页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">success</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">fail</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useAuth</span>(<span class="params">success?: Function, fail?: Function</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> history = useHistory();</span><br><span class="line">    <span class="keyword">const</span> [isLoading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> token = storage.get(<span class="string">'token'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先检查 token</span></span><br><span class="line">        <span class="keyword">if</span> (token) &#123;</span><br><span class="line">            api.checkToken().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                    success &amp;&amp; success();</span><br><span class="line">                    setLoading(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    history.replace(LOGIN_URL);</span><br><span class="line">                    fail &amp;&amp; fail();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                history.replace(LOGIN_URL);</span><br><span class="line">                fail &amp;&amp; fail();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            history.replace(LOGIN_URL);</span><br><span class="line">            fail &amp;&amp; fail();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isLoading;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法四，基于上面的，再做一步验证。</p><p>由于上面是点击按钮时做验证的，那么如果用户直接输入 url 进入就会检验不到。这样的话在主的路由页面里做一次验证。</p><p>例如编写一个 Admin 页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Admin = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在这里做一下验证</span></span><br><span class="line">    <span class="keyword">const</span> isLoading = useAuth();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> (</span><br><span class="line">        &lt;Loading /&gt;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;nav&gt;</span><br><span class="line">                &lt;AuthButton&gt;...&lt;<span class="regexp">/AuthButton&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>nav&gt;</span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">                &lt;Route path=<span class="string">'home'</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">                &lt;Route path=<span class="string">'home1'</span> component=&#123;Home1&#125; /&gt;</span><br><span class="line">                &lt;Route path=<span class="string">'home2'</span> component=&#123;Home2&#125; /&gt;</span><br><span class="line">                &lt;Route path=<span class="string">'home3'</span> component=&#123;Home3&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://reactrouter.com/web/example/auth-workflow" target="_blank" rel="noopener">https://reactrouter.com/web/example/auth-workflow</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于 React Router 4 没有事件系统，因此在前端路由守卫这里比 Vue-Router 做起来麻烦多了，因为监听不到路由的变化。&lt;/p&gt;
&lt;p&gt;那么怎么做呢？React Router 的作者说了，难的都由你们自己实现，哈哈。&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://me.lizhooh.com/categories/React/"/>
    
    
      <category term="学习笔记" scheme="http://me.lizhooh.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Javascript" scheme="http://me.lizhooh.com/tags/Javascript/"/>
    
      <category term="前端" scheme="http://me.lizhooh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React-Router" scheme="http://me.lizhooh.com/tags/React-Router/"/>
    
  </entry>
  
  <entry>
    <title>移动端适配的方案</title>
    <link href="http://me.lizhooh.com//stories/2020/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E7%9A%84%E6%96%B9%E6%A1%88/"/>
    <id>http://me.lizhooh.com//stories/2020/06/移动端/移动端适配的方案/</id>
    <published>2020-06-19T07:46:23.000Z</published>
    <updated>2021-06-15T06:10:52.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于移动端不同的设备屏幕大小，不同的分辨率，导致 15px 在不同手机上显示不用的效果，有的手机看起来比较小，有的手机看起来比较大，因此就产生了<strong>前端移动端适配</strong>的问题。</p><p>目前来看，移动端适配问题，主要以 <code>viewport + rem + flexbox + media + vw/vh + 百分比</code> 实现。</p><p><strong>说明：</strong></p><ul><li>viewport：设置不可缩放，缩放为 1。</li><li>rem：全部字体大小，边距等使用 rem，默认是 1rem = 16px，rem 会继承 html 的 font-size。</li><li>flexbox：弹性布局，适合移动端这种小屏幕。</li><li>media：媒体查询，可以针对不同设备宽度进行调整 rem 的值。</li><li>vw/vh：现在的手机基本都兼容了，也是主流的方式。</li><li>百分比：用百分比控制布局，例如 width: 33.333%，实现一行三列。</li></ul><a id="more"></a><p>下面来看看几大厂的做法。</p><h2 id="淘宝移动端"><a href="#淘宝移动端" class="headerlink" title="淘宝移动端"></a>淘宝移动端</h2><p>淘宝的移动端适配做的比较好，通过自家的 flexible 库，用 js 实现不同宽度下的根 font-size。</p><blockquote><p>flexible 有个计算方式是：<code>1rem = 100px</code>，编写时遵循这个规则即可。</p></blockquote><p>不断切换手机可以发现：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* galaxy s5 */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">96px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* iphone 5/SE */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">85.3333px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* iphone 6/7/8 */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* iphone 6/7/8 plus */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">110.4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ipad  */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">204.8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有部分的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">        recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</span><br><span class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//如果页面的宽度超过了640px，那么页面中html的font-size恒为100px，</span></span><br><span class="line">            <span class="comment">//否则页面中html的font-size的大小为：100*(当前页面宽度/640)</span></span><br><span class="line">            <span class="keyword">if</span> (clientWidth &gt;= <span class="number">640</span>) &#123;</span><br><span class="line">                docEl.style.fontSize = <span class="string">'100px'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//此时1rem=100px</span></span><br><span class="line">                docEl.style.fontSize = <span class="number">100</span> * (clientWidth / <span class="number">640</span>) + <span class="string">'px'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><h2 id="京东移动端"><a href="#京东移动端" class="headerlink" title="京东移动端"></a>京东移动端</h2><p>打开京东移动端的页面，挖代码来看看发现实现适配方式与淘宝的有所不同，京东的实现方式主要是使用 <code>rem + media</code>。</p><p>审查某个字体的样式，可以看到，全部的使用 <code>rem</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.graphic-wz</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.6rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0.825rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.75rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再切换几个手机试试：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ipad */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">540px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">28.8px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* iphone 6/7/8 plus */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">5.33333vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* iphone 5/SE */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">320px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">17.06667px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 其他情况大部分都是 5.33333vw */</span></span><br></pre></td></tr></table></figure><p>vw 估计他们手动算好不同的屏幕大小下的值，重复写两个 font-size 是为了不兼容 vw 时使用默认的大小。</p><p>与淘宝相比其实整体思路是不变的，因为淘宝是通过 js 来动态改变 font-size，对兼容性比较好，而京东的是通过 <code>vw</code> 来设置 font-size。而 <code>vw</code> 是一个自适应的属性，它会自动根据屏幕的变化来尝试变化，例如屏幕是 960px，那么 5.33333vw 应该是 0.05.33333% * 960px。</p><h2 id="网易新闻"><a href="#网易新闻" class="headerlink" title="网易新闻"></a>网易新闻</h2><p>网易新闻实现方式和京东类似，下面是从网易新闻 css 挖出来的代码。</p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2020/6/20200704161210.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">320px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">42.667px</span>; <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">321px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">360px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">48px</span>; <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">361px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">50px</span>; <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">376px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">393px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">52.4px</span>; <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">394px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">412px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">54.93px</span>; <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">413px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">55.2px</span>; <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">415px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">480px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">64px</span>; <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">481px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">540px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">72px</span>; <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">541px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">640px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">85.33px</span>; <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">641px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">720px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">96px</span>; <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">721px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">102.4px</span>; <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">769px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">102.4px</span>; <span class="attribute">font-size</span>: <span class="number">13.33333vw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>京东的是 5.33333vw，网页新闻的是 13.33333vw，差这么多，最后的显示效果为什么一样呢？因为实际的 rem 写法不同，例如京东的文字是 <code>font-size: 0.6rem;</code>，网易新闻的是 <code>font-size: 0.34rem;</code>，哈哈。</p></blockquote><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><ul><li>导航滚动：<a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iscroll</a>，主要是解决一下下拉刷新，iOS 滚动条惯性的问题。</li><li>图片轮播：<a href="https://www.swiper.com.cn" target="_blank" rel="noopener">swiperjs</a>，基本移动端各大厂都在用，非常好用，性能也不错。</li><li>手机分辨率适配：<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">flexible</a>，淘宝自己在用，挺不错。</li><li>解决点击延迟：<a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">fastclick</a>，可以解决 iOS 点击延迟的问题。</li><li>annimate.css：<a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">annimate.css</a>，用 css3 替代实现的动画库。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>移动端适配方案有多种，可以通过动态 js 计算改变 rem 的值，也可以通过 vw 来改变 rem 的值，总的来说，最简单的方案就是 <code>rem + vw + media</code> 了。</p><p>补上 viewport 的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/101432990" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/101432990</a></li><li><a href="https://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="noopener">https://www.cnblogs.com/2050/p/3877280.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于移动端不同的设备屏幕大小，不同的分辨率，导致 15px 在不同手机上显示不用的效果，有的手机看起来比较小，有的手机看起来比较大，因此就产生了&lt;strong&gt;前端移动端适配&lt;/strong&gt;的问题。&lt;/p&gt;
&lt;p&gt;目前来看，移动端适配问题，主要以 &lt;code&gt;viewport + rem + flexbox + media + vw/vh + 百分比&lt;/code&gt; 实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;viewport：设置不可缩放，缩放为 1。&lt;/li&gt;
&lt;li&gt;rem：全部字体大小，边距等使用 rem，默认是 1rem = 16px，rem 会继承 html 的 font-size。&lt;/li&gt;
&lt;li&gt;flexbox：弹性布局，适合移动端这种小屏幕。&lt;/li&gt;
&lt;li&gt;media：媒体查询，可以针对不同设备宽度进行调整 rem 的值。&lt;/li&gt;
&lt;li&gt;vw/vh：现在的手机基本都兼容了，也是主流的方式。&lt;/li&gt;
&lt;li&gt;百分比：用百分比控制布局，例如 width: 33.333%，实现一行三列。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="移动端" scheme="http://me.lizhooh.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://me.lizhooh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="移动端" scheme="http://me.lizhooh.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>移动端调试几大方式</title>
    <link href="http://me.lizhooh.com//stories/2020/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E5%87%A0%E5%A4%A7%E6%96%B9%E5%BC%8F/"/>
    <id>http://me.lizhooh.com//stories/2020/06/移动端/移动端调试几大方式/</id>
    <published>2020-06-18T11:26:53.000Z</published>
    <updated>2021-06-15T06:10:52.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>移动端调试是一个比较难的点，手机系统涉及 Android 和 iOS 两大阵型。iOS 的麻烦点在于 iOS 本身的浏览器有很多兼容性坑，而 Android 的麻烦的在于 Android 手机有很多不同的版本以及浏览器，例如 UC，QQ，百度，360，微信浏览器等，特别是微信浏览器堪称移动端的 IE。</p><h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><p>移动端调试痛点在于：</p><ul><li>开发时，在自己电脑上运行得好好的，在手机上打开就挂了，但是手机上又看不到 error log。</li><li>上线后，某用户表示页面失灵，但我们自己又重现不出来，看不到用户侧的出错信息。</li><li>某些界面在 PC 端上，在华为上显示正常，到了另一台手机，布局都花了。</li></ul><a id="more"></a><h2 id="PC-上"><a href="#PC-上" class="headerlink" title="PC 上"></a>PC 上</h2><h3 id="在-Chorme-上"><a href="#在-Chorme-上" class="headerlink" title="在 Chorme 上"></a>在 Chorme 上</h3><p>在 PC Chorme 上，按  ctrl + shift + m 即可以进入移动端调试页面，这个大家都懂的。</p><h3 id="使用模拟器-Charles"><a href="#使用模拟器-Charles" class="headerlink" title="使用模拟器 + Charles"></a>使用模拟器 + Charles</h3><p>使用 Android 模拟器（例如雷电模拟器），iOS 模拟器，外加 Charles 来调试。</p><h3 id="微信-web-开发者工具"><a href="#微信-web-开发者工具" class="headerlink" title="微信 web 开发者工具"></a>微信 web 开发者工具</h3><p>微信 web 开发者工具很好的为我们提供了内置类似 weinre 的调试工具。使用起来也非常简单，直接打开工具即可。</p><h2 id="真机上"><a href="#真机上" class="headerlink" title="真机上"></a>真机上</h2><h3 id="Vconsole"><a href="#Vconsole" class="headerlink" title="Vconsole"></a>Vconsole</h3><p>Vconsole 是腾讯出的一个移动端调试神器，界面设计良好，可以很方便的调试查看网络请求，js 输出，DOM 元素等。</p><p>使用方式也非常简单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意要在头部引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'path/to/vconsole.min.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要实例化才显示</span></span><br><span class="line"><span class="keyword">const</span> vconsole = <span class="keyword">new</span> vConsole();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有一些方法可以使用</span></span><br><span class="line">vconsole.ready(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>在线 demo：</strong>微信扫描以下二维码（或微信内长按图片识别二维码），即可体验 vConsole 面板。</p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="http://static.oschina.net/uploads/img/201604/28220925_QXNO.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <h3 id="Eruda"><a href="#Eruda" class="headerlink" title="Eruda"></a>Eruda</h3><p>Eruda 与  Vconsole 类似，这里就不具体介绍了，直接放出 github：<a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener">https://github.com/liriliri/eruda</a></p><h3 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h3><p>Charles 是一个抓包软件，可以在真机上进行抓包来调试网络层。</p><h3 id="Chrome-Android-USB-调试（强烈推荐）"><a href="#Chrome-Android-USB-调试（强烈推荐）" class="headerlink" title="Chrome + Android USB 调试（强烈推荐）"></a>Chrome + Android USB 调试（强烈推荐）</h3><p><strong>分为几个步骤：</strong></p><ul><li>第一步：打开 Android 手机 设置 &gt; 开发者选项 &gt; USB 调试。</li><li>第二步：通过数据线连接你的电脑和 Android 手机，记得授权。</li><li>第三步：给你的 Android 手机下载一个手机版的 Chrome 浏览器，并在手机上的 Chrome 浏览器 中打开你需要调试的页面。</li><li>第四步：打开你电脑上的 Chrome，按下图标注顺序，先 F12 打开调试面板，然后找到 remote devices（在右上角 <code>...</code> 图标 More Tools 里）。</li><li>第五步：remote devices 里会显示在手机 chrome 打开的页面，每个页面右侧都有一个 Inspect 检查的按钮，点击就会出现你熟悉的调试页面了。</li></ul>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2020/6/20200702200951.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <blockquote><p>具体原理，我猜是手机端的 Chrome 通过协议连接，把界面的数据传输到 PC 端的 Chorme 从而实现点对点的调试。</p></blockquote><h3 id="Mac-Safari-IOS-USB-调试（强烈推荐）"><a href="#Mac-Safari-IOS-USB-调试（强烈推荐）" class="headerlink" title="Mac + Safari + IOS USB 调试（强烈推荐）"></a>Mac + Safari + IOS USB 调试（强烈推荐）</h3><p><strong>分为几个步骤：</strong></p><ul><li>第一步：打开苹果手机 设置 &gt; Safari 浏览器 &gt; 高级 &gt; Web 检查器。</li><li>第二步：打开 Mac 上的 Safari 浏览器 &gt; 偏好设置 &gt; 高级 &gt; 在菜单栏中显示“开发”菜单。</li><li>第三步：用数据线连接你的 Mac 电脑和苹果手机，并选择信任设备。然后在手机的 Safari 浏览器 中打开你需要调试的页面。</li><li>第四步：点击之后，就会出现熟悉的调试界面。</li></ul>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2020/6/20200702200814.jpg" alt title>            </div>            <div class="image-caption"></div>        </figure>            <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2020/6/20200702200818.jpg" alt title>            </div>            <div class="image-caption"></div>        </figure>    <h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener">https://github.com/liriliri/eruda</a></li><li><a href="https://github.com/Tencent/vConsole" target="_blank" rel="noopener">https://github.com/Tencent/vConsole</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;移动端调试是一个比较难的点，手机系统涉及 Android 和 iOS 两大阵型。iOS 的麻烦点在于 iOS 本身的浏览器有很多兼容性坑，而 Android 的麻烦的在于 Android 手机有很多不同的版本以及浏览器，例如 UC，QQ，百度，360，微信浏览器等，特别是微信浏览器堪称移动端的 IE。&lt;/p&gt;
&lt;h2 id=&quot;痛点&quot;&gt;&lt;a href=&quot;#痛点&quot; class=&quot;headerlink&quot; title=&quot;痛点&quot;&gt;&lt;/a&gt;痛点&lt;/h2&gt;&lt;p&gt;移动端调试痛点在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发时，在自己电脑上运行得好好的，在手机上打开就挂了，但是手机上又看不到 error log。&lt;/li&gt;
&lt;li&gt;上线后，某用户表示页面失灵，但我们自己又重现不出来，看不到用户侧的出错信息。&lt;/li&gt;
&lt;li&gt;某些界面在 PC 端上，在华为上显示正常，到了另一台手机，布局都花了。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="移动端" scheme="http://me.lizhooh.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://me.lizhooh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="移动端" scheme="http://me.lizhooh.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Prettier 文档</title>
    <link href="http://me.lizhooh.com//stories/2020/06/%E5%89%8D%E7%AB%AF/Prettier%20%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>http://me.lizhooh.com//stories/2020/06/前端/Prettier 格式化配置/</id>
    <published>2020-06-06T10:23:48.000Z</published>
    <updated>2021-06-15T06:10:52.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Prettier 的中文意思是“漂亮的、机灵的”，也是一个流行的代码格式化工具的名称，它能够解析代码，使用你自己设定的规则来重新打印出格式规范的代码。</p><p><strong>Prettier 具有以下几个有优点：</strong></p><ul><li>可配置化</li><li>支持多种语言</li><li>集成多数的编辑器</li><li>简洁的配置项</li></ul><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在 vscode 上使用非常简单，先安装 prettier 的插件即可，默认开启格式化功能。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>看了一下文档，Prettier 的配置很少，基本涉及的主要几个方面，还不能做到很细粒度的配置，不像 ESLint 这么多。</p><p>Prettier 使用 cosmiconfig 来支持配置文件。这意味着您可以通过（按优先顺序）配置更漂亮：</p><ul><li>package.json 中的 prettier 字段。</li><li>.prettierrc 用 JSON 或 YAML 编写的文件，带有可选扩展名：（.json/.yaml/.yml 无扩展名优先）。</li><li>一个 .prettierrc.js 或 prettier.config.js 文件导出的对象。</li><li>.prettierrc.toml 用 TOML 编写的文件（需要.toml扩展名）。</li></ul><p>将从要格式化的文件的位置开始解析配置文件，然后向上搜索文件树，直到找到（或找不到）配置文件。</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"trailingComma"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"tabWidth"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"singleQuote"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    trailingComma: <span class="string">"es5"</span>,</span><br><span class="line">    tabWidth: <span class="number">4</span>,</span><br><span class="line">    semi: <span class="literal">false</span>,</span><br><span class="line">    singleQuote: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">trailingComma:</span> <span class="string">"es5"</span></span><br><span class="line"><span class="attr">tabWidth:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">semi:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">singleQuote:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><h4 id="printWidth"><a href="#printWidth" class="headerlink" title="printWidth"></a>printWidth</h4><p>换行的长度，默认 80。</p><h4 id="tabWidth"><a href="#tabWidth" class="headerlink" title="tabWidth"></a>tabWidth</h4><p>缩进字节数，默认 4。</p><h4 id="useTabs"><a href="#useTabs" class="headerlink" title="useTabs"></a>useTabs</h4><p>缩进是否使用 tab，默认 false。</p><h4 id="semi"><a href="#semi" class="headerlink" title="semi"></a>semi</h4><p>句尾添加分号，默认 true。</p><h4 id="singleQuote"><a href="#singleQuote" class="headerlink" title="singleQuote"></a>singleQuote</h4><p>使用单引号代替双引号，默认 false。</p><h4 id="proseWrap"><a href="#proseWrap" class="headerlink" title="proseWrap"></a>proseWrap</h4><p>解析器，不用管。</p><h4 id="arrowParens"><a href="#arrowParens" class="headerlink" title="arrowParens"></a>arrowParens</h4><p>箭头函数参数只有一个时是否要有小括号，默认 always（总是要）。</p><h4 id="bracketSpacing"><a href="#bracketSpacing" class="headerlink" title="bracketSpacing"></a>bracketSpacing</h4><p>在对象，数组括号与文字之间加空格，默认 true。</p><h4 id="disableLanguages"><a href="#disableLanguages" class="headerlink" title="disableLanguages"></a>disableLanguages</h4><p>不格式化的语言列表，默认空，建议设置 <code>[&quot;vue&quot;]</code>，不要管 vue，哈哈。</p><h4 id="endOfLine"><a href="#endOfLine" class="headerlink" title="endOfLine"></a>endOfLine</h4><p>结尾符，默认是 auto。</p><h4 id="eslintIntegration"><a href="#eslintIntegration" class="headerlink" title="eslintIntegration"></a>eslintIntegration</h4><p>prettier 是否使用 eslint 的代码格式进行校验，默认 false。</p><h4 id="ignorePath"><a href="#ignorePath" class="headerlink" title="ignorePath"></a>ignorePath</h4><p>忽略文件的路径，默认 .prettierignore。</p><h4 id="jsxBracketSameLine"><a href="#jsxBracketSameLine" class="headerlink" title="jsxBracketSameLine"></a>jsxBracketSameLine</h4><p>在 jsx 中把 ‘&gt;’ 是否单独放一行，默认 false。</p><h4 id="jsxSingleQuote"><a href="#jsxSingleQuote" class="headerlink" title="jsxSingleQuote"></a>jsxSingleQuote</h4><p>在 jsx 中使用单引号代替双引号，默认 false。</p><h4 id="parser"><a href="#parser" class="headerlink" title="parser"></a>parser</h4><p>格式化的解析器，默认 babylon。</p><h4 id="stylelintIntegration"><a href="#stylelintIntegration" class="headerlink" title="stylelintIntegration"></a>stylelintIntegration</h4><p>prettier 是否使用 stylelint 的代码格式进行校验，默认 false。</p><h4 id="trailingComma"><a href="#trailingComma" class="headerlink" title="trailingComma"></a>trailingComma</h4><p>在对象或数组最后一个元素后面是否加逗号，默认加。</p><h4 id="tslintIntegration"><a href="#tslintIntegration" class="headerlink" title="tslintIntegration"></a>tslintIntegration</h4><p>prettier 是否使用 tslint 的代码格式进行校验，默认 false。</p><h2 id="在-vsocde-上配置"><a href="#在-vsocde-上配置" class="headerlink" title="在 vsocde 上配置"></a>在 vsocde 上配置</h2><p>配置每个语言的规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"[html]"</span>: &#123;</span><br><span class="line">        <span class="string">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"[css]"</span>: &#123;</span><br><span class="line">        <span class="string">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"[less]"</span>: &#123;</span><br><span class="line">        <span class="string">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"[javascript]"</span>: &#123;</span><br><span class="line">        <span class="string">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vscode 上配置需要加 prettier 前缀，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超过最大值换行</span></span><br><span class="line"><span class="string">"prettier.printWidth"</span>: <span class="number">100</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩进字节数</span></span><br><span class="line"><span class="string">"prettier.tabWidth"</span>: <span class="number">4</span>,</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://prettier.io/" target="_blank" rel="noopener">https://prettier.io/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Prettier 的中文意思是“漂亮的、机灵的”，也是一个流行的代码格式化工具的名称，它能够解析代码，使用你自己设定的规则来重新打印出格式规范的代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prettier 具有以下几个有优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可配置化&lt;/li&gt;
&lt;li&gt;支持多种语言&lt;/li&gt;
&lt;li&gt;集成多数的编辑器&lt;/li&gt;
&lt;li&gt;简洁的配置项&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="http://me.lizhooh.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://me.lizhooh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>小程序自定义导航栏（NavTopBar）</title>
    <link href="http://me.lizhooh.com//stories/2020/05/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E6%A0%8F%EF%BC%88NavTopBar%EF%BC%89/"/>
    <id>http://me.lizhooh.com//stories/2020/05/小程序/小程序自定义导航栏（NavTopBar）/</id>
    <published>2020-05-30T07:04:44.000Z</published>
    <updated>2021-06-15T06:10:52.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>UI 遇到这么一个需求，要求导航栏自定义，实现像如下图的情况，要求背景颜色渐变，可以选择定位内容。这样一来得弄自定义导航栏，下面来看看怎么自定义。</p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2020/5/20200528152707.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <a id="more"></a><h2 id="自定义导航栏"><a href="#自定义导航栏" class="headerlink" title="自定义导航栏"></a>自定义导航栏</h2><p><strong>注意问题：</strong></p><ul><li>无论是小程序，还是使用 React Native，还是原生 App 都面临一个手机状态栏高度的问题，statusBarHeight 用来获取手机状态栏的高度，这个需要在全局 app.js 中的 onLaunch，调用 wx.getSystemInfo 获取，navigationBarHeight + 默认的高度，这个是设定整个导航栏的高度。</li><li>因为自定义导航栏每个页面都要写，所以把导航栏封装了公共组件，这样只需要在每个页面引入即可。</li><li>还有注意的，在写样式距离和大小时建议都用px，因小程序右边的胶囊也是用的 px，不是 rpx。</li><li>由于需要异步的获取手机状态栏高度，因此会有一些闪屏问题，采用初始化值缓存方式可以实现后面避免重复获取。</li></ul><h2 id="原生小程序语法实现"><a href="#原生小程序语法实现" class="headerlink" title="原生小程序语法实现"></a>原生小程序语法实现</h2><p>原生小程序语法实现，先在页面或全局的 app.json 里配置导航栏 style 为 <code>custom</code>。</p><p>之后实现一个导航栏组件，在每个页面里进行复用即可。</p><h2 id="使用-Taro-实现"><a href="#使用-Taro-实现" class="headerlink" title="使用 Taro 实现"></a>使用 Taro 实现</h2><p>使用 Taro 实现就是，先设置页面的导航栏：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Home.config = &#123;</span><br><span class="line">    navigationBarTitleText: <span class="string">'哈哈哈'</span>,</span><br><span class="line">    navigationStyle: <span class="string">'custom'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再写一个导航栏组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Taro <span class="keyword">from</span> <span class="string">'@tarojs/taro'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text &#125; <span class="keyword">from</span> <span class="string">'@tarojs/components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/styles/compoents/nav-top-bar.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> statusBarHeight = <span class="number">20</span>;</span><br><span class="line">Taro.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = Taro.getSystemInfoSync();</span><br><span class="line">    statusBarHeight = res.statusBarHeight;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">NavTopBar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> s1 = &#123; <span class="attr">paddingTop</span>: statusBarHeight + <span class="string">'px'</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> s2 = &#123; <span class="attr">top</span>: statusBarHeight + <span class="string">'px'</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;View className=<span class="string">'nav-top-bar'</span> style=&#123;s1&#125;&gt;</span><br><span class="line">            &lt;View className=<span class="string">'nav-top-bar-box'</span>&gt;&lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">            &lt;View className='nav-top-bar-main' style=&#123;s2&#125;&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Text&gt;Hello&lt;/</span>Text&gt;</span><br><span class="line">            &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav-top-bar</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="variable">$height</span>: <span class="number">50PX</span>;</span><br><span class="line"></span><br><span class="line">    &amp;-box &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="variable">$height</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-main &#123;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">height</span>: <span class="variable">$height</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10</span>rpx <span class="number">16</span>rpx rgba(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0.08</span>);</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12</span> * <span class="number">2</span>rpx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在页面里使用即可。</p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><p>设置页面的 enablePullDownRefresh 属性设置为 true，下拉刷新时，自定义头部跟随一起滚动。</p><p>目前解决方案就是不要设置为 true，并且下拉刷新都自己自定义实现一个。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>无</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;UI 遇到这么一个需求，要求导航栏自定义，实现像如下图的情况，要求背景颜色渐变，可以选择定位内容。这样一来得弄自定义导航栏，下面来看看怎么自定义。&lt;/p&gt;

        &lt;figure class=&quot;image-bubble&quot;&gt;
            &lt;div class=&quot;img-lightbox&quot;&gt;
                &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                &lt;img src=&quot;/assets/image/2020/5/20200528152707.png&quot; alt title&gt;
            &lt;/div&gt;
            &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
        &lt;/figure&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://me.lizhooh.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="学习笔记" scheme="http://me.lizhooh.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://me.lizhooh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="http://me.lizhooh.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序页面数据回传的解决方案</title>
    <link href="http://me.lizhooh.com//stories/2020/05/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B5%E9%9D%A2%E6%95%B0%E6%8D%AE%E5%9B%9E%E4%BC%A0%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://me.lizhooh.com//stories/2020/05/小程序/小程序页面数据回传的解决方案/</id>
    <published>2020-05-28T01:03:42.000Z</published>
    <updated>2021-06-15T06:10:52.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>小程序比较坑爹的是很多东西不能动态的生成，例如官方提供的 Tabs 不能动态生成。还有其他的坑，比如页面之间传值通过 url 参数的方向进行，因此导致了页面回退的时候不能把数据回传到父页面。在很多业务场景里都需要不同页面之间的数据传递，在 Android 里通过 Intent 可以进行数据回传，在小程序里官方没有提供相关接口，而是需要一种比较“屌丝”的方式去实现它。</p><blockquote><p>React 的解决方案：<a href="/stories/2019/06/小程序/Taro%20小程序页面数据回传解决方案（装饰器）/">Taro 小程序页面数据回传解决方案（装饰器）</a><br>小程序在基础库：2.7.3 已经开始支持页面数据回传了，不过也是基于事件系统来实现。<a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html" target="_blank" rel="noopener">wx.navigateTo</a></p></blockquote><a id="more"></a><p>术语：</p><ul><li><code>源页面</code>：从 A 页面打开 B 页面，那么 A 就是源页面。</li><li><code>本页面</code>：从 A 页面打开 B 页面，那么 B 就是本页面。</li><li><code>回传数据</code>：关闭 B 页面时，将数据传递给 A 页面。</li></ul><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>在 React 系的小程序开发框架，我采用 ES7 的装饰器方式来实现，在 Vue 系（特指 uniapp）的小程序开发里由于没有类组件和函数组件的概念，因此不能使用装饰器来实现，换成另外一种实现方式就是采用 <code>订阅</code> 与 <code>发布</code> 的形式，也就是事件系统。</p><p>采用事件系统可以使用 Vue 的事件总线：EventBus，但是我不喜欢它，而是使用一个轻量级的事件库：<a href="https://github.com/hustcc/onfire.js" target="_blank" rel="noopener">onfire.js</a>，一个轻量级的事件订阅与发布库，只有 500k 大小。</p><p>onfire 的使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> EE <span class="keyword">from</span> <span class="string">'onfire.js'</span>;</span><br><span class="line"><span class="keyword">const</span> ee = <span class="keyword">new</span> EE();</span><br><span class="line"></span><br><span class="line">ee.on(<span class="string">'mouseover'</span>, () =&gt; &#123;&#125;);       <span class="comment">// 监听一个自定义事件</span></span><br><span class="line">ee.once(<span class="string">'click'</span>, () =&gt; &#123;&#125;);         <span class="comment">// 仅监听一次事件</span></span><br><span class="line">ee.fire(<span class="string">'click'</span>, <span class="number">1</span>, <span class="string">'hello'</span>, <span class="literal">true</span>); <span class="comment">// 发出/触发带有参数的事件，可以传任何类型的参数</span></span><br><span class="line">ee.off(<span class="string">'click'</span>);                    <span class="comment">// 取消订阅活动</span></span><br></pre></td></tr></table></figure><p>在 Vue 系（特指 uniapp）的小程序上实现页面数据回传，最开始的思路</p><ul><li>在现在的页面里监听回传的事件。</li><li>在目标页里，退出时进行触发监听事件。</li></ul><p>想在 main.js 里挂载在 vue 里：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$fire = <span class="keyword">new</span> onfire();</span><br></pre></td></tr></table></figure><p>A 页面（传递数据给 B 页面）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$fire.on(<span class="string">'home-ret'</span>, res =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'回传数据'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    onUnload() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$fire.off(<span class="string">'home-ret'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        open() &#123;</span><br><span class="line">            uni.navigateTo(&#123;</span><br><span class="line">                url: <span class="string">'./home?'</span> + qs.stringify(&#123;</span><br><span class="line">                    title: <span class="string">'123abc'</span>,</span><br><span class="line">                &#125;),</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B 页面（回传数据给 A 页面）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            title: <span class="string">''</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">option</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(option);</span><br><span class="line">        <span class="keyword">this</span>.title = option.title;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        close() &#123;</span><br><span class="line">            <span class="keyword">this</span>.$fire.fire(<span class="string">'home-ret'</span>, &#123;</span><br><span class="line">                name: <span class="string">'试试看'</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">            uni.navigateBack();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这种方式实现了页面的数据回传，当然还有用 Vuex 的方式，当前如果两个页面之间的数量和关系不确定的话，Vuex 用起来比较麻烦。</p><h2 id="改良"><a href="#改良" class="headerlink" title="改良"></a>改良</h2><p>我们可以看到，在 onLoad 事件里进行监听事件，在 onUnload 里进行卸载监听，这样页面多时重复代码会非常多，并且很累赘，下面来改良一下。</p><p>首先在 Vue 里改良的方法第一个是想到了 mixin 的方式，下面直接就写一个中间件来显示，最后通过 Vue.use 来使用。</p><p><strong>约定：</strong></p><ul><li>在 A 页面里使用 ukey 来标识回传的页面 id，使用 ucallback 来指定回传数据的监听函数。</li><li>在 B 页面里使用 rkey 来标识传给目标页面的 id，使用 rcallback 来执行回传的数据。</li></ul><blockquote><p>这里有一个 BUG，如果在路由栈里面有多个相同 ukey 的页面呢？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useOnfire = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, opts = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    ukey: <span class="string">'ukey'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    rkey: <span class="string">'rkey'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    rcallback: <span class="string">'rcallback'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    uaction: <span class="string">'uaction'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> onfire = <span class="keyword">new</span> Onfire();</span><br><span class="line">    <span class="comment">// 记录回传页面的 ukey，用于在执行 rcallback 时检查判断</span></span><br><span class="line">    <span class="keyword">const</span> ukeys = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isRunU</span>(<span class="params">than, cb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> ukey = than.$options[opts.ukey];</span><br><span class="line">        <span class="keyword">const</span> rkey = than.$options[opts.rkey];</span><br><span class="line">        <span class="keyword">const</span> uaction = than.$options[opts.uaction];</span><br><span class="line">        <span class="comment">// 如果组件上 ukey 属性为字符串，则用来指定时被回传的页面，uaction 指定回传时的监听函数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> ukey === <span class="string">'string'</span> &amp;&amp; <span class="keyword">typeof</span> uaction === <span class="string">'function'</span>) &#123;</span><br><span class="line">            ukeys.add(ukey);</span><br><span class="line">            <span class="comment">// 这是回传时执行的回调函数</span></span><br><span class="line">            cb &amp;&amp; cb();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果组件上 rkey 属性为字符串，则用来指定时被回传的页面，rcallback 指定回传时的监听函数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> rkey === <span class="string">'string'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ukeys.has(rkey)) &#123;</span><br><span class="line">                <span class="comment">// 往组件上添加函数</span></span><br><span class="line">                than.rcallback = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">                    cb.call(than, data =&gt; onfire.fire(rkey, data));</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> path = than.__route__ ? than.__route__ : <span class="string">'未知路径'</span>;</span><br><span class="line">                <span class="built_in">console</span>.warn(<span class="string">`[<span class="subst">$&#123;path&#125;</span>] 没有找到与 rkey(<span class="subst">$&#123;rkey&#125;</span>) 关联的 ukey`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里就是采用 mixin 实现重复的代码。</span></span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">        onLoad() &#123;</span><br><span class="line">            <span class="keyword">const</span> ukey = <span class="keyword">this</span>.$options[opts.ukey];</span><br><span class="line">            <span class="keyword">const</span> uaction = <span class="keyword">this</span>.$options[opts.uaction];</span><br><span class="line">            isRunU(<span class="keyword">this</span>, () =&gt; &#123;</span><br><span class="line">                onfire.on(ukey, uaction.bind(<span class="keyword">this</span>));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onUnload() &#123;</span><br><span class="line">            <span class="keyword">const</span> ukey = <span class="keyword">this</span>.$options[opts.ukey];</span><br><span class="line">            isRunU(<span class="keyword">this</span>, () =&gt; &#123;</span><br><span class="line">                ukeys.delete(ukey);</span><br><span class="line">                onfire.off(ukey);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line">            <span class="keyword">const</span> ukey = <span class="keyword">this</span>.$options[opts.ukey];</span><br><span class="line">            isRunU(<span class="keyword">this</span>, () =&gt; &#123;</span><br><span class="line">                ukeys.delete(ukey);</span><br><span class="line">                onfire.off(ukey)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vue.use(useOnfire);</span><br></pre></td></tr></table></figure><p>使用的时候非常简单，在 A 页面里就是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    ukey: <span class="string">'abc123'</span>,                     <span class="comment">// 约定格式</span></span><br><span class="line">    uaction(data) &#123;                     <span class="comment">// 约定格式</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'回传数据'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        open() &#123;</span><br><span class="line">            uni.navigateTo(&#123;</span><br><span class="line">                url: <span class="string">'./home?'</span> + qs.stringify(&#123;</span><br><span class="line">                    title: <span class="string">'123abc'</span>,</span><br><span class="line">                &#125;),</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 B 页面里就是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    rkey: <span class="string">'abc123'</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        close() &#123;</span><br><span class="line">            <span class="keyword">this</span>.rcallback(<span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">                done(&#123; <span class="attr">name</span>: <span class="string">'试试看'</span> &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            uni.navigateBack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2020/5/20200527152602.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <h2 id="React-的实现方式"><a href="#React-的实现方式" class="headerlink" title="React 的实现方式"></a>React 的实现方式</h2><p>之前的在 React 里是采用装饰器实现的，但是要使用类组件，如果使用函数组件那就没则了。这里换个思路基于 onfire 和 React Hooks 来实现数据回传，其实也非常简单,写法比 Vue 简单多了，逻辑可控性也更好。</p><p>首先写一个 Hooks 函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">'@tarojs/taro'</span>;</span><br><span class="line"><span class="keyword">import</span> Onfire <span class="keyword">from</span> <span class="string">'onfire.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> onfire = <span class="keyword">new</span> Onfire();</span><br><span class="line"><span class="keyword">const</span> ukeys: <span class="built_in">Set</span>&lt;string&gt; = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听回传数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useRecFire</span>(<span class="params">key, callback</span>) </span>&#123;</span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 添加监听</span></span><br><span class="line">        <span class="keyword">if</span> (!ukeys.has(key)) &#123;</span><br><span class="line">            onfire.on(key, callback);</span><br><span class="line">            ukeys.add(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            ukeys.delete(key);</span><br><span class="line">            onfire.off(key);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行回传数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useRetFire</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">        cb.call(<span class="literal">null</span>, data =&gt; onfire.fire(key, data));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A 页面（传递数据给 B 页面）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    useRecFire(<span class="string">'index-page'</span>, res =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'回传数据'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> onClick = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        Taro.navigateTo(&#123;</span><br><span class="line">            url: <span class="string">'/pages/home/home?'</span> + qs.stringify(&#123;</span><br><span class="line">                title: <span class="string">'abc123'</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;View&gt;&lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>B 页面（回传数据给 A 页面）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; params &#125; = useRouter();</span><br><span class="line">    <span class="keyword">const</span> title = params.title;</span><br><span class="line">    <span class="keyword">const</span> uAction = useRetFire(<span class="string">'index-page'</span>);</span><br><span class="line">    <span class="keyword">const</span> onClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        uAction(<span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">            Taro.navigateBack();</span><br><span class="line">            done(&#123; <span class="attr">name</span>: <span class="string">'呵呵呵'</span> &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;View&gt;&lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;小程序比较坑爹的是很多东西不能动态的生成，例如官方提供的 Tabs 不能动态生成。还有其他的坑，比如页面之间传值通过 url 参数的方向进行，因此导致了页面回退的时候不能把数据回传到父页面。在很多业务场景里都需要不同页面之间的数据传递，在 Android 里通过 Intent 可以进行数据回传，在小程序里官方没有提供相关接口，而是需要一种比较“屌丝”的方式去实现它。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;React 的解决方案：&lt;a href=&quot;/stories/2019/06/小程序/Taro%20小程序页面数据回传解决方案（装饰器）/&quot;&gt;Taro 小程序页面数据回传解决方案（装饰器）&lt;/a&gt;&lt;br&gt;小程序在基础库：2.7.3 已经开始支持页面数据回传了，不过也是基于事件系统来实现。&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wx.navigateTo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://me.lizhooh.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="学习笔记" scheme="http://me.lizhooh.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://me.lizhooh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="http://me.lizhooh.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>💅 零运行时的 CSS in JS 框架：linaria</title>
    <link href="http://me.lizhooh.com//stories/2020/05/React/Style/%E9%9B%B6%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%20CSS%20in%20JS%20%E6%A1%86%E6%9E%B6%EF%BC%9Alinaria/"/>
    <id>http://me.lizhooh.com//stories/2020/05/React/Style/零运行时的 CSS in JS 框架：linaria/</id>
    <published>2020-05-26T07:07:23.000Z</published>
    <updated>2021-06-15T06:10:52.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前接触的两个 CSS in JS 框架：styled-components 和 emotion 都是采用 js 驱动，有运行时的框架。今天来介绍，一个完全无运行时的 CSS in JS 框架，那就是 <a href="https://github.com/callstack/linaria" target="_blank" rel="noopener">linaria</a>。</p><p>与 styled-components 和 emotion 相比，linaria 最大的特点就是 <strong>无运行时</strong>，它会在 Webpack/Parcel 编译是对你写的 CSS in JS 进行抽离，生成独立的 css 文件，脱离的 js 的动态生成样式的方式，其性能更加的好和轻量级，并且使用方式与 styled-compoents 类似，提供 styled 风格和 css 风格的两种模式。</p><a id="more"></a><h2 id="styled-模式"><a href="#styled-模式" class="headerlink" title="styled 模式"></a>styled 模式</h2><p>styled 模式就是一个样式就是一个组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; styled &#125; <span class="keyword">from</span> <span class="string">'linaria/react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Title&gt;Hello&lt;<span class="regexp">/Title&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Title = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">    font-size: 20px;</span></span><br><span class="line"><span class="string">    color: #39f;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h2 id="css-模式"><a href="#css-模式" class="headerlink" title="css 模式"></a>css 模式</h2><p>css 模式就是通过 class 来实现的样式，个人更加喜欢这种方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; css &#125; <span class="keyword">from</span> <span class="string">'linaria'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div className=&#123;styles.text&#125;&gt; Hello&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">    text: css`</span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: 25<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#f34</span>;</span></span><br><span class="line"><span class="css">    `</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>linaria 支持静态的变量赋值，但是不支持动态的变量赋值，例如不支持主题功能，不支持将 state 注入到样式里。</p><p>以下方式是支持的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> color = <span class="string">'#f34'</span>;</span><br><span class="line"><span class="keyword">const</span> text = css`</span><br><span class="line"><span class="css">    <span class="selector-tag">font-size</span>: 25<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: </span><span class="subst">$&#123;color&#125;</span><span class="css">;</span></span><br><span class="line"><span class="css">`</span>,</span><br></pre></td></tr></table></figure><p>如果你要想做主题功能，请使用 css 变量的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = css`</span><br><span class="line"><span class="css">    <span class="selector-tag">--color-primary</span>: <span class="selector-id">#6200ee</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">--color-accent</span>: <span class="selector-id">#03dac4</span>;</span></span><br><span class="line"><span class="css">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = css`</span><br><span class="line"><span class="css">    <span class="selector-tag">--color-primary</span>: <span class="selector-id">#03a9f4</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">--color-accent</span>: <span class="selector-id">#e91e63</span>;</span></span><br><span class="line"><span class="css">`</span>;</span><br><span class="line"></span><br><span class="line">&lt;Container className=&#123;a&#125; /&gt;;</span><br></pre></td></tr></table></figure><h2 id="Data-属性"><a href="#Data-属性" class="headerlink" title="Data 属性"></a>Data 属性</h2><p>可以定义在元素上的 data attr，来指定样式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; css &#125; <span class="keyword">from</span> <span class="string">'linaria'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> box = css`</span><br><span class="line"><span class="css">    &amp;<span class="selector-attr">[data-valid]</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-tag">yellow</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    &amp;<span class="selector-attr">[data-valid=<span class="string">"invalid"</span>]</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-tag">red</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    &amp;<span class="selector-attr">[data-valid=<span class="string">"valid"</span>]</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-tag">green</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Box</span>(<span class="params">&#123; color, valid &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div</span><br><span class="line">            className=&#123;box&#125;</span><br><span class="line">            data-valid=&#123;valid ? <span class="string">'valid'</span> : <span class="string">'invalid'</span>&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在-Create-React-App-的项目上使用"><a href="#在-Create-React-App-的项目上使用" class="headerlink" title="在 Create React App 的项目上使用"></a>在 Create React App 的项目上使用</h2><p>安装 <a href="https://www.npmjs.com/package/craco" target="_blank" rel="noopener">craco</a> 和 <a href="https://www.npmjs.com/package/craco-linaria" target="_blank" rel="noopener">craco-linaria</a>，更改 npm script 为 craco 操作，接着添加 <code>craco.config.js</code> 文件在项目根目录上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CracoLinariaPlugin = <span class="built_in">require</span>(<span class="string">'craco-linaria'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [&#123;</span><br><span class="line">        plugin: CracoLinariaPlugin,</span><br><span class="line">        options: &#123;</span><br><span class="line">            <span class="comment">// Linaria options</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/callstack/linaria" target="_blank" rel="noopener">https://github.com/callstack/linaria</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前接触的两个 CSS in JS 框架：styled-components 和 emotion 都是采用 js 驱动，有运行时的框架。今天来介绍，一个完全无运行时的 CSS in JS 框架，那就是 &lt;a href=&quot;https://github.com/callstack/linaria&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;linaria&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;与 styled-components 和 emotion 相比，linaria 最大的特点就是 &lt;strong&gt;无运行时&lt;/strong&gt;，它会在 Webpack/Parcel 编译是对你写的 CSS in JS 进行抽离，生成独立的 css 文件，脱离的 js 的动态生成样式的方式，其性能更加的好和轻量级，并且使用方式与 styled-compoents 类似，提供 styled 风格和 css 风格的两种模式。&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://me.lizhooh.com/categories/React/"/>
    
    
      <category term="Javascript" scheme="http://me.lizhooh.com/tags/Javascript/"/>
    
      <category term="前端" scheme="http://me.lizhooh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="http://me.lizhooh.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react-hook-form：一个表单终结者 hook 库</title>
    <link href="http://me.lizhooh.com//stories/2020/05/React/Hooks/react-hook-form%EF%BC%9A%E4%B8%80%E4%B8%AA%E8%A1%A8%E5%8D%95%E7%BB%88%E7%BB%93%E8%80%85%20hook%20%E5%BA%93/"/>
    <id>http://me.lizhooh.com//stories/2020/05/React/Hooks/react-hook-form：一个表单终结者 hook 库/</id>
    <published>2020-05-25T14:22:43.000Z</published>
    <updated>2021-06-15T06:10:52.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>React-Hook-Form 是一个基于 hooks 的表单处理库，它的特点就是使用简单，高性能，其核心原理就是使用 ref 来实现细粒度的数据更新。</p><a id="more"></a><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>使用 useForm 这个 hook 函数来挂载钩子，其返回值有 <code>register</code>、<code>handleSubmit</code>、<code>watch</code>、<code>errors</code>。</p><p><strong>说明：</strong></p><ul><li>register：用于绑定表单元素。</li><li>handleSubmit：用于绑定提交时的事件，参数自带提交的 data。</li><li>watch：用于监听某个表单元素的值改变时触发。</li><li>errors：如果表单输入不通过验证时，就会储存在 errors 对象里。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useForm &#125; <span class="keyword">from</span> <span class="string">'react-hook-form'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; register, handleSubmit, watch, errors &#125; = useForm();</span><br><span class="line">    <span class="keyword">const</span> onSubmit = <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(watch(<span class="string">'example'</span>));</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;form onSubmit=&#123;handleSubmit(onSubmit)&#125;&gt;</span><br><span class="line">            &lt;input name=<span class="string">'example'</span> defaultValue=<span class="string">'test'</span> ref=&#123;register&#125; /&gt;</span><br><span class="line">            &lt;input name=<span class="string">'exampleRequired'</span> ref=&#123;register(&#123; <span class="attr">required</span>: <span class="literal">true</span> &#125;)&#125; /&gt;</span><br><span class="line">            &#123;errors.exampleRequired &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This field is required<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#125;</span><br><span class="line">            &lt;input type=<span class="string">'submit'</span> /&gt;</span><br><span class="line">            &#123;<span class="comment">/* &lt;button onClick=&#123;handleSubmit(onSubmit)&#125;&gt;提交&lt;/button&gt; */</span>&#125;</span><br><span class="line">        &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>使用 register 绑定表单元素有两种方式，一种是在元素上指定 name，使用 <code>ref={register}</code> 即可。如果是使用第三方或者在 React-Native 上使用，可能就没有 name 属性，那么就得这样使用 <code>ref={register({ name: &#39;xxxx&#39; })}</code>，其道理都是一样的，只是表现形式不同而已。</p><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>React-Hook-Form 默认提供以下的表单验证方式，其他则需要自己自定义了：</p><ul><li>required</li><li>min，max</li><li>minLength，maxLength</li><li>pattern（正则匹配）</li><li>validate</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">'firstName'</span> ref=&#123;register(&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">maxLength</span>: <span class="number">20</span> &#125;)&#125; /&gt;</span><br><span class="line">&lt;input name=<span class="string">'lastName'</span> ref=&#123;register(&#123; <span class="attr">pattern</span>: <span class="regexp">/^[A-Za-z]+$/i</span> &#125;)&#125; /&gt;</span><br><span class="line">&lt;input name=<span class="string">'age'</span> type=<span class="string">'number'</span> ref=&#123;register(&#123; <span class="attr">min</span>: <span class="number">18</span>, <span class="attr">max</span>: <span class="number">99</span> &#125;)&#125; /&gt;</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>首先，在 errors 对象里，默认是空对象，如果有验证不通过，则会往 errors 对象里添加 key 为某个 name 的对象，因此可以利用与或来显示错误提示信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;errors.exampleRequired &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This field is required<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#125;</span><br></pre></td></tr></table></figure><h2 id="在-Antd-上使用"><a href="#在-Antd-上使用" class="headerlink" title="在 Antd 上使用"></a>在 Antd 上使用</h2><p>为什么特别提 Antd，因为 Antd 的组件设计比较特别，特别是表单这方面，Antd 采用的是内部 state 的数据管理方式，因此使用 React-Hook-Form 时需要采用容器包裹的方式。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://react-hook-form.com/get-started#Quickstart" target="_blank" rel="noopener">https://react-hook-form.com/get-started#Quickstart</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;React-Hook-Form 是一个基于 hooks 的表单处理库，它的特点就是使用简单，高性能，其核心原理就是使用 ref 来实现细粒度的数据更新。&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://me.lizhooh.com/categories/React/"/>
    
    
      <category term="Javascript" scheme="http://me.lizhooh.com/tags/Javascript/"/>
    
      <category term="前端" scheme="http://me.lizhooh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="http://me.lizhooh.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs Websocket 简易指南</title>
    <link href="http://me.lizhooh.com//stories/2020/05/Nodejs/Nodejs%20Websocket%20%E7%AE%80%E6%98%93%E6%8C%87%E5%8D%97/"/>
    <id>http://me.lizhooh.com//stories/2020/05/Nodejs/Nodejs Websocket 简易指南/</id>
    <published>2020-05-24T11:03:08.000Z</published>
    <updated>2021-06-15T06:10:52.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想用 Websocket 开发一个实时的应用，在 Nodejs 当然是优先选择 socket.io，但是如果客户端不使用 socket.io 而是使用原生的 Websocket API 呢？那么服务端就不能用 socket.io 了。</p><p>在 Nodejs 上官方的 API 并不提供 Websocket 模块，因此我们需要使用第三方库，常用的就是 <a href="https://www.npmjs.com/package/ws" target="_blank" rel="noopener">ws</a>。</p><a id="more"></a><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>Websocket 的接口相对比较简单，整体来说，主要是一个发送消息和接收消息的过程。一般使用 Websocket 的流程是：1. 连接服务，2. 监听和发送消息。</p><p>Websocket 发送消息使用的是 ws.send 函数，接收消息使用的是 ws.on(‘message’) 来接收。</p><p><a href="https://www.npmjs.com/package/ws" target="_blank" rel="noopener">ws</a> 库实现了标准 Websocket API，支持 ws 和 wss 协议，下面来安装它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add ws</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>服务端操作就是创建一个 Websocket Server，注意需要指定端口，默认是 80。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> ws.Server(&#123;</span><br><span class="line">    port: <span class="number">3324</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 socket 连接</span></span><br><span class="line">server.on(<span class="string">'connection'</span>, socket =&gt; &#123;</span><br><span class="line">    <span class="comment">// 有人连接了，先给它创建一个 id</span></span><br><span class="line">    socket.id = <span class="built_in">Math</span>.random().toString(<span class="number">32</span>).slice(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 有人连接了，先回复一个 welcome</span></span><br><span class="line">    socket.send(<span class="string">'welcome'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'welcome id: '</span> + socket.id);</span><br><span class="line">    socket.on(<span class="string">'message'</span>, data =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        socket.send(data + <span class="string">' --- '</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    socket.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">    socket.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'leave id: '</span> + socket.id);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ws://127.0.0.1:3324'</span>);</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端就是连接 Websocket Server 服务器，需要指定协议。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> ws(<span class="string">'ws://127.0.0.1:3324'</span>);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'open'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我连上了'</span>);</span><br><span class="line">    client.send(<span class="string">'hello'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'断开连接'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'message'</span>, res =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到的消息：'</span>, res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="基于事件的-API-设计"><a href="#基于事件的-API-设计" class="headerlink" title="基于事件的 API 设计"></a>基于事件的 API 设计</h2><p>大致是想实现 socket.io 的对等事件 API，大概是 Websocket 原始提供了 message 和事件监听和 send 的数据发送，能不能像 socket.io 一样，发送消息使用 io.emit(‘type’, ‘data’)，接收消息使用 io.on(‘type’, data =&gt; {})，来操作的，答案是可以的，那就要自己封装一下了。</p><p>下面来介绍如何基于 Event 对象来实现客户端和服务端对等事件。</p><p>大致的思路时，首先在实现一个类继承 Event，在构造函数里进行 message 的监听，如果监听到，则解析和分发数据，注意要触发 super.emit 而不是 this.emit。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Event = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sio</span> <span class="keyword">extends</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(socket) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        <span class="comment">// 关键</span></span><br><span class="line">        <span class="keyword">this</span>.socket.on(<span class="string">'message'</span>, res =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123; command, data &#125; = <span class="built_in">JSON</span>.parse(res);</span><br><span class="line">                <span class="keyword">if</span> (command &amp;&amp; data) &#123;</span><br><span class="line">                    <span class="keyword">super</span>.emit(command, data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    on(type = <span class="string">''</span>, cb = <span class="built_in">Function</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.on(type, cb);</span><br><span class="line">    &#125;</span><br><span class="line">    emit(type = <span class="string">''</span>, data) &#123;</span><br><span class="line">        <span class="keyword">const</span> str = <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">command</span>: type, data &#125;);</span><br><span class="line">        <span class="keyword">this</span>.socket.send(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Sio;</span><br></pre></td></tr></table></figure><p>使用的时候就非常简单了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 news 事件的消息</span></span><br><span class="line">sio.on(<span class="string">'news'</span>, data =&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送 news 事件的数据</span></span><br><span class="line">sio.emit(<span class="string">'news'</span>, <span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure><p>之后服务端改造为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"><span class="keyword">const</span> Sio = <span class="built_in">require</span>(<span class="string">'./sio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> ws.Server(&#123;</span><br><span class="line">    port: <span class="number">3324</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 socket 连接</span></span><br><span class="line">server.on(<span class="string">'connection'</span>, socket =&gt; &#123;</span><br><span class="line">    <span class="comment">// 有人连接了，先给它创建一个 id</span></span><br><span class="line">    socket.id = <span class="built_in">Math</span>.random().toString(<span class="number">32</span>).slice(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 有人连接了，先回复一个 welcome</span></span><br><span class="line">    <span class="keyword">const</span> sio = <span class="keyword">new</span> Sio(socket);</span><br><span class="line">    sio.emit(<span class="string">'news'</span>, <span class="string">'welcome'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'welcome id: '</span> + socket.id);</span><br><span class="line"></span><br><span class="line">    sio.on(<span class="string">'hello'</span>, res =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ws://127.0.0.1:3324'</span>);</span><br></pre></td></tr></table></figure><p>之后客户端改造为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"><span class="keyword">const</span> Sio = <span class="built_in">require</span>(<span class="string">'./sio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> ws(<span class="string">'ws://127.0.0.1:3324'</span>);</span><br><span class="line"><span class="keyword">const</span> sio = <span class="keyword">new</span> Sio(client);</span><br><span class="line"></span><br><span class="line">+ <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        client.on(<span class="string">'open'</span>, resolve);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    sio.emit(<span class="string">'hello'</span>, <span class="string">'你好'</span>);</span><br><span class="line">    sio.on(<span class="string">'news'</span>, res =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'收到的消息：'</span>, res);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>好轻松实现了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.npmjs.com/package/ws" target="_blank" rel="noopener">https://www.npmjs.com/package/ws</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近想用 Websocket 开发一个实时的应用，在 Nodejs 当然是优先选择 socket.io，但是如果客户端不使用 socket.io 而是使用原生的 Websocket API 呢？那么服务端就不能用 socket.io 了。&lt;/p&gt;
&lt;p&gt;在 Nodejs 上官方的 API 并不提供 Websocket 模块，因此我们需要使用第三方库，常用的就是 &lt;a href=&quot;https://www.npmjs.com/package/ws&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ws&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="http://me.lizhooh.com/categories/Nodejs/"/>
    
    
      <category term="后端" scheme="http://me.lizhooh.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Nodejs" scheme="http://me.lizhooh.com/tags/Nodejs/"/>
    
      <category term="Javascript" scheme="http://me.lizhooh.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>小程序蓝牙开发指南</title>
    <link href="http://me.lizhooh.com//stories/2020/05/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>http://me.lizhooh.com//stories/2020/05/小程序/小程序蓝牙开发指南/</id>
    <published>2020-05-23T07:26:14.000Z</published>
    <updated>2021-06-15T06:10:52.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>小程序提供两种蓝牙的接口，一种是 <code>ibeacon</code>，一种是 <code>ble 4.0</code>（低功耗蓝牙）。蓝牙的应该场景非常广泛，在生活中已经有非常广泛的应用场景了，例如手环，手表，蓝牙耳机，蓝牙锁等。</p><p>本文介绍蓝牙的基础知识和如何在小程序上使用蓝牙，控制蓝牙设备。</p><a id="more"></a><h2 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h2><p>在蓝牙里，需要知道几个特定的名称：UUID，服务（Services），特征值（Characteristics），其他可以无视。</p><blockquote><p>蓝牙不难，但是烦人，调试困难，蓝牙传输还要转成字节码，还要进行 aes 加密，蓝牙读写数据步骤繁多，调试麻烦。</p></blockquote><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>UUID 是一个唯一的标识符，在蓝牙设备，设备的服务，服务中的特征值都有 UUID，可以利用 UUID 的唯一性来确定其服务、特征值等。</p><h3 id="服务（Services）"><a href="#服务（Services）" class="headerlink" title="服务（Services）"></a>服务（Services）</h3><p>一个蓝牙设备里有多个服务，每个服务里有多个特征值。</p><h3 id="特征值（Characteristics）"><a href="#特征值（Characteristics）" class="headerlink" title="特征值（Characteristics）"></a>特征值（Characteristics）</h3><p>特征值在服务里面，每一个服务都有一个或多个特征值。一般来说，如果想要给蓝牙传输数据，或者监听数据回传，那么就要向特征值进行读写数据。</p><p>特征值有分 write/read 的读写权限，这部分权限是在硬件设备出厂时，设置的，一旦设计好之后就不能修改了。</p><h3 id="低功耗蓝牙"><a href="#低功耗蓝牙" class="headerlink" title="低功耗蓝牙"></a>低功耗蓝牙</h3><p>一般设备用蓝牙用低功耗蓝牙比较多，比如手环，手表，蓝牙耳机等，这些都是用低功耗蓝牙。</p><h2 id="蓝牙操作流程"><a href="#蓝牙操作流程" class="headerlink" title="蓝牙操作流程"></a>蓝牙操作流程</h2><p>无论怎样，整个蓝牙都是围绕着怎么读数据和写数据进行，毕竟只有进行了读写数据，蓝牙才有交互的价值。</p><h3 id="第一步：初始化蓝牙模块"><a href="#第一步：初始化蓝牙模块" class="headerlink" title="第一步：初始化蓝牙模块"></a>第一步：初始化蓝牙模块</h3><p>初始化蓝牙，如果手机没有开启蓝牙或者不支持蓝牙会初始化失败，请做一下这种情况的判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在微信小程序上</span></span><br><span class="line">wx.openBluetoothAdapter(&#123; &#125;);</span><br><span class="line"><span class="comment">// 在 react native 上</span></span><br><span class="line">BleManager.start(&#123; &#125;);</span><br></pre></td></tr></table></figure><h3 id="第二步：搜索蓝牙设备"><a href="#第二步：搜索蓝牙设备" class="headerlink" title="第二步：搜索蓝牙设备"></a>第二步：搜索蓝牙设备</h3><p>搜索蓝牙，就不符合条件的蓝牙都会搜索到，包括笔记本的蓝牙，充电器里的蓝牙，手环的蓝牙星号，因此搜索出来会有很多个，注意筛选。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在微信小程序上</span></span><br><span class="line">wx.startBluetoothDevicesDiscovery(&#123; &#125;);</span><br><span class="line"><span class="comment">// 在 react native 上</span></span><br><span class="line">BleManager.scan([], <span class="number">10</span>, <span class="literal">true</span>);  <span class="comment">// 搜索 10s</span></span><br></pre></td></tr></table></figure><p>一般会得到以下数据格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    deviceId: <span class="string">'01:96:AC:17:79:59'</span>,</span><br><span class="line">    name: <span class="string">''</span>,                       <span class="comment">// 厂家出厂时固定</span></span><br><span class="line">    RSSI: <span class="number">-70</span>,                      <span class="comment">// 信号值</span></span><br><span class="line">    localName: <span class="string">''</span>,</span><br><span class="line">    advertisServiceUUIDs: [],</span><br><span class="line">    advertisData: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三步：连接指定的蓝牙设备"><a href="#第三步：连接指定的蓝牙设备" class="headerlink" title="第三步：连接指定的蓝牙设备"></a>第三步：连接指定的蓝牙设备</h3><p>在搜索出来的蓝牙列表里，选择指定的蓝牙进行连接，注意有可能会连接失败，或者连接断开的情况，请注意一下判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信小程序</span></span><br><span class="line">wx.createBLEConnection(&#123; deviceId &#125;);</span><br><span class="line"><span class="comment">// react native</span></span><br><span class="line">BleManager.connect(peripheralId);</span><br></pre></td></tr></table></figure><h3 id="第四步：获取蓝牙设备的服务列表"><a href="#第四步：获取蓝牙设备的服务列表" class="headerlink" title="第四步：获取蓝牙设备的服务列表"></a>第四步：获取蓝牙设备的服务列表</h3><p>连接上某个蓝牙时就可以直接获取其服务列表，注意一个蓝牙设备会有很多个服务，一个服务会有很多个特征值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信小程序</span></span><br><span class="line">wx.getBLEDeviceServices(&#123; deviceId &#125;);</span><br><span class="line"><span class="comment">// react native</span></span><br><span class="line">BleManager.retrieveServices(peripheralId);</span><br></pre></td></tr></table></figure><h3 id="第五步：获取某服务的-UUID，找到其特征值列表"><a href="#第五步：获取某服务的-UUID，找到其特征值列表" class="headerlink" title="第五步：获取某服务的 UUID，找到其特征值列表"></a>第五步：获取某服务的 UUID，找到其特征值列表</h3><p>特征值会分为 read，write，有读写方面的权限控制，请参考硬件商的设计，例如一下的图。</p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2020/5/20200523130532.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信小程序</span></span><br><span class="line">wx.getBLEDeviceCharacteristics(&#123; deviceId, serviceId &#125;);</span><br><span class="line"><span class="comment">// react native</span></span><br><span class="line">BleManager.retrieveServices(peripheralId, [serviceUUIDs]);</span><br></pre></td></tr></table></figure><h3 id="第六步：某特征值写入-读取数据"><a href="#第六步：某特征值写入-读取数据" class="headerlink" title="第六步：某特征值写入/读取数据"></a>第六步：某特征值写入/读取数据</h3><p>特征值的读写需要用 byte 字节码进行，因此需要先做转换。</p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2020/5/20200523130804.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <p>例如上图，假设 token 是 <code>01020304</code>，随机填充是 <code>AABBCCDD</code>，进行写入 <code>504E010101020304AABBCCDDEEFFGGHH</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信小程序</span></span><br><span class="line">wx.writeBLECharacteristicValue(&#123; deviceId, serviceId, characteristicId, value &#125;);</span><br><span class="line">wx.readBLECharacteristicValue(&#123; deviceId, serviceId, characteristicId &#125;);</span><br><span class="line"><span class="comment">// react native</span></span><br><span class="line">BleManager.write(peripheralId, serviceUUID, characteristicUUID, data);</span><br><span class="line">BleManager.read(peripheralId, serviceUUID, characteristicUUID);</span><br></pre></td></tr></table></figure><h3 id="第七步：监听特征值的回传数据"><a href="#第七步：监听特征值的回传数据" class="headerlink" title="第七步：监听特征值的回传数据"></a>第七步：监听特征值的回传数据</h3><p>再对特征值进行写入操作之后或得到一个回传数据。</p>        <figure class="image-bubble">            <div class="img-lightbox">                <div class="overlay"></div>                <img src="/assets/image/2020/5/20200523130804.png" alt title>            </div>            <div class="image-caption"></div>        </figure>    <p>例如上图，回传的数据是 <code>504F09112233445566778899AABBCCDD</code>，PMS 的值是 <code>112233445566778899</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信小程序</span></span><br><span class="line">wx.notifyBLECharacteristicValueChange(&#123; deviceId, serviceId, characteristicId, <span class="attr">state</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">// react native</span></span><br><span class="line">BleManager.startNotification(peripheral, service, characteristic);</span><br></pre></td></tr></table></figure><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>因为蓝牙的传输数据格式只能是 byte[] 类型的，因此需要做一些转换。</p><p>期间的数据格式转换，参考 <a href="https://www.npmjs.com/package/utf8-string-bytes" target="_blank" rel="noopener">https://www.npmjs.com/package/utf8-string-bytes</a> 或者，下面的实现方式。</p><p>参考一些代码实现 <code>字符串转换成 byte 数组</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringToByte</span>(<span class="params">str = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> bytes = [];</span><br><span class="line">    <span class="keyword">let</span> len = str.length, c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        c = str.charCodeAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="number">0x010000</span> &amp;&amp; c &lt;= <span class="number">0x10FFFF</span>) &#123;</span><br><span class="line">            bytes.push(((c &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x07</span>) | <span class="number">0xF0</span>);</span><br><span class="line">            bytes.push(((c &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</span><br><span class="line">            bytes.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</span><br><span class="line">            bytes.push((c &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="number">0x000800</span> &amp;&amp; c &lt;= <span class="number">0x00FFFF</span>) &#123;</span><br><span class="line">            bytes.push(((c &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0F</span>) | <span class="number">0xE0</span>);</span><br><span class="line">            bytes.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</span><br><span class="line">            bytes.push((c &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="number">0x000080</span> &amp;&amp; c &lt;= <span class="number">0x0007FF</span>) &#123;</span><br><span class="line">            bytes.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x1F</span>) | <span class="number">0xC0</span>);</span><br><span class="line">            bytes.push((c &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bytes.push(c &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考一些代码实现 <code>byte 数组转换成字符串</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">byteToString</span>(<span class="params">arr = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arr === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>, _arr = arr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> one = _arr[i].toString(<span class="number">2</span>),</span><br><span class="line">            v = one.match(<span class="regexp">/^1+?(?=0)/</span>);</span><br><span class="line">        <span class="keyword">if</span> (v &amp;&amp; one.length == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> bytesLength = v[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">let</span> store = _arr[i].toString(<span class="number">2</span>).slice(<span class="number">7</span> - bytesLength);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> st = <span class="number">1</span>; st &lt; bytesLength; st++) &#123;</span><br><span class="line">                store += _arr[st + i].toString(<span class="number">2</span>).slice(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            str += <span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(store, <span class="number">2</span>));</span><br><span class="line">            i += bytesLength - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            str += <span class="built_in">String</span>.fromCharCode(_arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h3><p>微信硬件平台，支持对蓝牙传输的数据进行加密，加密算法是 aes128，cbc 模式，pkcs7 填充，初始向量为密钥。</p><h3 id="调试问题"><a href="#调试问题" class="headerlink" title="调试问题"></a>调试问题</h3><p>因为蓝牙传输的数据限定了 32 位字节码，因此硬件厂商对传输的数据协议的设计需要很精密。</p><p>另外小程序 IDE 只支持 mac 系统的蓝牙调试，因此如果没有 mac 的话，要没改一次代码就进行真机调试，真机调试经常出现搜索不到蓝牙列表的情况，并且有时候会出现连接了就立刻自动断开的情况，另外 android 和 ios 的蓝牙又有一些坑。</p><p>所有，弄蓝牙模块不是很简单的事情。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://iot.weixin.qq.com/wiki/new/index.html?page=4-2-2" target="_blank" rel="noopener">https://iot.weixin.qq.com/wiki/new/index.html?page=4-2-2</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;小程序提供两种蓝牙的接口，一种是 &lt;code&gt;ibeacon&lt;/code&gt;，一种是 &lt;code&gt;ble 4.0&lt;/code&gt;（低功耗蓝牙）。蓝牙的应该场景非常广泛，在生活中已经有非常广泛的应用场景了，例如手环，手表，蓝牙耳机，蓝牙锁等。&lt;/p&gt;
&lt;p&gt;本文介绍蓝牙的基础知识和如何在小程序上使用蓝牙，控制蓝牙设备。&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://me.lizhooh.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="学习笔记" scheme="http://me.lizhooh.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://me.lizhooh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="小程序" scheme="http://me.lizhooh.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
</feed>
